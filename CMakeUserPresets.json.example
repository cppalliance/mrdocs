{
    "version": 3,
    "cmakeMinimumRequired": {
        "major": 3,
        "minor": 10,
        "patch": 0
    },
    "configurePresets": [
        {
            "name": "debug-msvc",
            "displayName": "Debug MSVC",
            "description": "Build on Windows + MSVC natively (Debug)",
            "inherits": "debug",
            "generator": "Ninja",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "cacheVariables": {
                "LLVM_ROOT": "C:\\Users\\$env{USERNAME}\\Libraries\\llvm\\install\\MSVC\\Debug",
                "Clang_ROOT": "C:\\Users\\$env{USERNAME}\\Libraries\\llvm\\install\\MSVC\\Debug",
                "CMAKE_EXPORT_COMPILE_COMMANDS": "ON",
                "CMAKE_CXX_FLAGS": "/W4",
                "CMAKE_C_FLAGS": "/W4"
            },
            "condition": {
                "type": "equals",
                "lhs": "${hostSystemName}",
                "rhs": "Windows"
            },
            "vendor": {
                "microsoft.com/VisualStudioSettings/CMake/1.0": {
                    "hostOS": [
                        "Windows"
                    ],
                    "intelliSenseMode": "windows-msvc-x64"
                }
            }
        },
        {
            "name": "release-msvc",
            "displayName": "Release MSVC",
            "description": "Build on Windows + MSVC natively (Release)",
            "inherits": "debug-msvc",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "cacheVariables": {
                "CMAKE_BUILD_TYPE": "Release",
                "LLVM_ROOT": "C:\\Users\\$env{USERNAME}\\Libraries\\llvm\\Release",
                "Clang_ROOT": "C:\\Users\\$env{USERNAME}\\Libraries\\llvm\\Release"
            }
        },
        {
            "name": "debug-wsl-gcc",
            "displayName": "Debug WSL GCC",
            "description": "Build on WSL + GCC (Debug). Windows developers can use this preset to catch GCC-specific issues with WSL. WSL tends to be very slow, so this is not recommended for interactive development.",
            "inherits": "debug",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "cacheVariables": {
                "CMAKE_CXX_COMPILER": "/usr/bin/g++",
                "CMAKE_C_COMPILER": "/usr/bin/gcc",
                "LLVM_ROOT": "/home/$env{USER}/libraries/llvm",
                "Clang_ROOT": "/home/$env{USER}/libraries/llvm",
                "CMAKE_EXPORT_COMPILE_COMMANDS": "ON",
                "CMAKE_CXX_FLAGS": "-Wall -Wextra -Werror",
                "CMAKE_C_FLAGS": "-Wall -Wextra -Werror"
            },
            "vendor": {
                "microsoft.com/VisualStudioSettings/CMake/1.0": {
                    "hostOS": [
                        "Linux"
                    ],
                    "intelliSenseMode": "windows-msvc-x64"
                },
                "jetbrains.com/clion": {
                    "toolchain": "WSL GCC"
                }
            }
        },
        {
            "name": "debug-wsl-gcc-asan",
            "displayName": "Debug WSL GCC AddressSanitizer",
            "description": "Build on WSL + GCC with AddressSanitizer (Debug). This is useful for catching memory issues.",
            "inherits": "debug-wsl-gcc",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "cacheVariables": {
                "CMAKE_CXX_FLAGS": "-fsanitize=address -fno-omit-frame-pointer -g -O0 -fno-inline-functions"
            }
        },
        {
            "name": "release-wsl-gcc",
            "displayName": "Release WSL GCC",
            "description": "Build on WSL + GCC (Release). Windows developers can use this preset to catch GCC-specific issues with WSL. WSL tends to be very slow, so this is not recommended for interactive development.",
            "inherits": "debug-wsl-gcc",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "cacheVariables": {
                "CMAKE_BUILD_TYPE": "Release",
                "LLVM_ROOT": "/home/$env{USER}/libraries/llvm-project/llvm/install/Linux/Release",
                "Clang_ROOT": "/home/$env{USER}/libraries/llvm-project/llvm/install/Linux/Release"
            }
        },
        {
            "name": "relwithdebinfo-wsl-gcc",
            "displayName": "RelWithDebInfo WSL GCC",
            "description": "Build on WSL + GCC (RelWithDebInfo). Windows developers can use this preset to catch GCC-specific issues with WSL. WSL tends to be very slow, so this is not recommended for interactive development.",
            "inherits": "debug-wsl-gcc",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "cacheVariables": {
                "CMAKE_BUILD_TYPE": "RelWithDebInfo",
                "LLVM_ROOT": "/home/$env{USER}/libraries/llvm-project/llvm/install/Linux/Release",
                "Clang_ROOT": "/home/$env{USER}/libraries/llvm-project/llvm/install/Linux/Release"
            }
        },
        {
            "name": "debug-wsl-clang",
            "displayName": "Debug WSL Clang",
            "description": "Build on WSL + Clang (Debug). Windows developers can use this preset to catch Clang-specific issues with WSL. WSL tends to be very slow, so this is not recommended for interactive development.",
            "inherits": "debug-wsl-gcc",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "cacheVariables": {
                "CMAKE_CXX_COMPILER": "/usr/bin/clang++-16",
                "CMAKE_C_COMPILER": "/usr/bin/clang-16"
            },
            "vendor": {
                "jetbrains.com/clion": {
                    "toolchain": "WSL Clang"
                }
            }
        },
        {
            "name": "debug-macos",
            "displayName": "Debug (macOS)",
            "description": "Preset for building MrDocs in Debug mode with the default compiler in macOS.",
            "inherits": "debug",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "cacheVariables": {
                "CMAKE_BUILD_TYPE": "Debug",
                "LLVM_ROOT": "$env{HOME}/Developer/cpp-libs/llvm-project/install/debug",
                "Clang_ROOT": "$env{HOME}/Developer/cpp-libs/llvm-project/install/debug",
                "duktape_ROOT": "$env{HOME}/Developer/cpp-libs/duktape/install/debug",
                "Duktape_ROOT": "$env{HOME}/Developer/cpp-libs/duktape/install/debug",
                "libxml2_ROOT": "$env{HOME}/Developer/cpp-libs/libxml2/install/release",
                "LibXml2_ROOT": "$env{HOME}/Developer/cpp-libs/libxml2/install/release",
                "MRDOCS_BUILD_TESTS": true,
                "MRDOCS_BUILD_DOCS": false,
                "MRDOCS_GENERATE_REFERENCE": false,
                "MRDOCS_GENERATE_ANTORA_REFERENCE": false,
                "CMAKE_MAKE_PROGRAM": "$env{HOME}/Developer/cpp-libs/ninja/ninja"
            },
            "condition": {
                "type": "equals",
                "lhs": "${hostSystemName}",
                "rhs": "Darwin"
            },
            "warnings": {
                "unusedCli": false
            },
            "generator": "Ninja"
        },
        {
            "name": "debug-macos-fast",
            "displayName": "Debug with Optimized Dependencies (macOS)",
            "description": "Preset for building MrDocs in Debug mode with the default compiler in macOS.",
            "inherits": "debug",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "cacheVariables": {
                "CMAKE_BUILD_TYPE": "Debug",
                "LLVM_ROOT": "$env{HOME}/Developer/cpp-libs/llvm-project/install/release",
                "Clang_ROOT": "$env{HOME}/Developer/cpp-libs/llvm-project/install/release",
                "duktape_ROOT": "$env{HOME}/Developer/cpp-libs/duktape/install/release",
                "Duktape_ROOT": "$env{HOME}/Developer/cpp-libs/duktape/install/release",
                "libxml2_ROOT": "$env{HOME}/Developer/cpp-libs/libxml2/install/release",
                "LibXml2_ROOT": "$env{HOME}/Developer/cpp-libs/libxml2/install/release",
                "MRDOCS_BUILD_TESTS": true,
                "MRDOCS_BUILD_DOCS": false,
                "MRDOCS_GENERATE_REFERENCE": false,
                "MRDOCS_GENERATE_ANTORA_REFERENCE": false,
                "CMAKE_MAKE_PROGRAM": "$env{HOME}/Developer/cpp-libs/ninja/ninja"
            },
            "warnings": {
                "unusedCli": false
            },
            "condition": {
                "type": "equals",
                "lhs": "${hostSystemName}",
                "rhs": "Darwin"
            },
            "generator": "Ninja"
        },
        {
            "name": "release-macos",
            "displayName": "Release (macOS)",
            "description": "Preset for building MrDocs in Release mode with the default compiler in macOS.",
            "inherits": "release",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "cacheVariables": {
                "CMAKE_BUILD_TYPE": "Release",
                "LLVM_ROOT": "$env{HOME}/Developer/cpp-libs/llvm-project/install/release",
                "Clang_ROOT": "$env{HOME}/Developer/cpp-libs/llvm-project/install/release",
                "duktape_ROOT": "$env{HOME}/Developer/cpp-libs/duktape/install/release",
                "Duktape_ROOT": "$env{HOME}/Developer/cpp-libs/duktape/install/release",
                "libxml2_ROOT": "$env{HOME}/Developer/cpp-libs/libxml2/install/release",
                "LibXml2_ROOT": "$env{HOME}/Developer/cpp-libs/libxml2/install/release",
                "MRDOCS_BUILD_TESTS": true,
                "MRDOCS_BUILD_DOCS": false,
                "MRDOCS_GENERATE_REFERENCE": false,
                "MRDOCS_GENERATE_ANTORA_REFERENCE": false,
                "CMAKE_MAKE_PROGRAM": "$env{HOME}/Developer/cpp-libs/ninja/ninja"
            },
            "condition": {
                "type": "equals",
                "lhs": "${hostSystemName}",
                "rhs": "Darwin"
            },
            "warnings": {
                "unusedCli": false
            },
            "generator": "Ninja"
        },
        {
            "name": "release-macos-gcc",
            "displayName": "Release (macOS) (gcc)",
            "description": "Preset for building MrDocs in Release mode with the gcc compiler in macOS.",
            "inherits": "release",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "cacheVariables": {
                "CMAKE_BUILD_TYPE": "Release",
                "LLVM_ROOT": "$env{HOME}/Developer/cpp-libs/llvm-project/install/release-gcc",
                "Clang_ROOT": "$env{HOME}/Developer/cpp-libs/llvm-project/install/release-gcc",
                "duktape_ROOT": "$env{HOME}/Developer/cpp-libs/duktape/install/release-gcc",
                "Duktape_ROOT": "$env{HOME}/Developer/cpp-libs/duktape/install/release-gcc",
                "libxml2_ROOT": "$env{HOME}/Developer/cpp-libs/libxml2/install/release-gcc",
                "LibXml2_ROOT": "$env{HOME}/Developer/cpp-libs/libxml2/install/release-gcc",
                "MRDOCS_BUILD_TESTS": true,
                "MRDOCS_BUILD_DOCS": false,
                "MRDOCS_GENERATE_REFERENCE": false,
                "MRDOCS_GENERATE_ANTORA_REFERENCE": false,
                "CMAKE_C_COMPILER": "/usr/bin/gcc",
                "CMAKE_CXX_COMPILER": "/usr/bin/g++",
                "CMAKE_MAKE_PROGRAM": "$env{HOME}/Developer/cpp-libs/ninja/ninja"
            },
            "warnings": {
                "unusedCli": false
            },
            "condition": {
                "type": "equals",
                "lhs": "${hostSystemName}",
                "rhs": "Darwin"
            },
            "generator": "Ninja"
        }
    ]
}