{{!--
    Renders declaration suffix of a Type Info Object.

    The suffix is the part of the declaration that comes after the type name.
    It might include the suffix for pointee types, array element types,
    or function parameters with specifiers.

    Expected Context: {Type Info}

    Optional parameters:
        nolink: If true, types and symbols will not be linked.

    Example:
        {{> declarator-suffix type }}

    See: https://mrdocs.com/docs/mrdocs/develop/generators.html#dom_reference
--}}
{{#if pointee-type~}}
    {{! Pointee type is array or function ~}}
    {{#if (contains (arr "array" "function") pointee-type.kind)~}}
        {{! Close the function parenthesis from the declarator prefix ~}}
        {{! The symbol name will be rendered between the prefix and suffix ~}}
        )
    {{~/if~}}
    {{! Declarator suffix of the pointee type ~}}
    {{~>type/declarator-suffix pointee-type nolink=nolink~}}
{{else if (eq kind "array")~}}
    {{! Array declarator suffix includes bounds and array element suffix ~}}
    [{{bounds-value}}]
    {{~>type/declarator-suffix element-type nolink=nolink~}}
{{else if (eq kind "function")~}}
    {{! Function declarator suffix includes parameter types and cv-qualifiers ~}}
    ({{#each param-types~}}
        {{~>type/declarator nolink=../nolink~}}
        {{~#unless @last}}, {{/unless~}}
    {{/each~}}
    {{! Include final "..." for variadic functions ~}}
    {{#if is-variadic}}{{#if param-types}}, {{/if}}...{{/if}}){{!~}}
    {{! cv-qualifiers as literal strings ~}}
    {{~#if cv-qualifiers}} {{cv-qualifiers}}{{/if~}}
    {{! Refqualifiers as "&" or "&&" ~}}
    {{#if (eq ref-qualifier "lvalue")}} &{{else if (eq ref-qualifier "rvalue")}} &&{{/if~}}
    {{! Exception spec as literal string ~}}
    {{#if exception-spec}} {{exception-spec}}{{/if~}}
    {{! Declarator suffix of the return type ~}}
    {{~>type/declarator-suffix return-type nolink=nolink~}}
{{/if}}