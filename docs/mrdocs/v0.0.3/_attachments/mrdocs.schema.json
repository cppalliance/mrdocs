{
  "$schema": "http://json-schema.org/draft-07/schema",
  "properties": {
    "addons": {
      "default": "<mrdocs-root>/share/mrdocs/addons",
      "description": "Path to the Addons directory. The Addons directory contains the template files used by generators to create the documentation. When a custom Addons directory is not specified, the default templates are used. The default templates are located at the `share/mrdocs/addons` directory of the MrDocs installation. Users can create custom templates by copying the default templates to a custom directory and specifying the custom directory using this option.",
      "title": "Path to the Addons directory",
      "type": "string"
    },
    "anonymous-namespaces": {
      "default": true,
      "description": "Determine whether symbols in anonymous namespaces should be extracted. When set to `always`, symbols in anonymous namespaces are always extracted. When set to `dependency`, symbols in anonymous namespaces are extracted only if they are referenced by the source code. When set to `never`, symbols in anonymous namespaces are never extracted.",
      "title": "Extraction policy for anonymous namespaces",
      "type": "boolean"
    },
    "base-url": {
      "default": "",
      "description": "Base URL for links to source code. The base URL is used to create links to the source code in the documentation. The base URL is combined with the path to the source file to create the link.",
      "title": "Base URL for links to source code",
      "type": "string"
    },
    "cmake": {
      "default": "",
      "description": "When the compilation-database option is a CMakeLists.txt file, these arguments are passed to the cmake command to generate the compilation_database.json.",
      "title": "CMake arguments when generating the compilation database from CMakeLists.txt",
      "type": "string"
    },
    "compilation-database": {
      "default": "",
      "description": "Path to the compilation database or a build script to generate it. The compilation database is a JSON file that contains the compiler commands used to build the source code. The compilation database is used to extract the compiler flags and the source files used to build the source code and extract symbols. This option also accepts the path to a build script such as CMakeLists.txt to be used to generate the compilation database. In this case, MrDocs will look for CMake in `PATH` or in `CMAKE_ROOT` and run the script to generate the compilation database file.",
      "title": "Path to the compilation database",
      "type": "string"
    },
    "defines": {
      "default": [],
      "description": "Additional defines passed to the compiler when building the source code. These defines are added to the compilation database regardless of the strategy to generate it.",
      "items": {
        "type": "string"
      },
      "title": "Additional defines passed to the compiler",
      "type": "array"
    },
    "embedded": {
      "default": false,
      "description": "Output an embeddable document, which excludes the header, the footer, and everything outside the body of the document. This option is useful for producing documents that can be inserted into an external template.",
      "title": "Output an embeddable document",
      "type": "boolean"
    },
    "exclude": {
      "default": [],
      "description": "Symbols defined in files in these directories are not extracted even if they are in the list of include directories. When relative, the paths are relative to the directory of the mrdocs configuration file. For instance, \"include/experimental\" will exclude all files in the directory `<config-dir>/include/experimental`.",
      "items": {
        "type": "string"
      },
      "title": "Input directories to exclude",
      "type": "array"
    },
    "exclude-patterns": {
      "default": [],
      "description": "File patterns to exclude. Files that match these patterns are not extracted even if they are in the list of include directories. The patterns are relative to the configuration file. A single * will match all files in the directory. Double ** will match all files in the directory and its subdirectories.",
      "items": {
        "type": "string"
      },
      "title": "File patterns to exclude",
      "type": "array"
    },
    "exclude-symbols": {
      "default": [],
      "description": "A symbol that matches one of these patterns is not extracted even if whitelisted by \"include-symbols\". See the documentation for \"include-symbols\" for the pattern syntax.",
      "items": {
        "type": "string"
      },
      "title": "Symbol patterns to exclude",
      "type": "array"
    },
    "file-patterns": {
      "default": [
        "*.hpp",
        "*.h",
        "*.hh",
        "*.ipp",
        "*.inc",
        "*.cpp",
        "*.cc",
        "*.cxx",
        "*.c",
        "*.hxx"
      ],
      "description": "File patterns to include. Only the files that match these patterns are extracted. The patterns are relative to the input directories.",
      "items": {
        "type": "string"
      },
      "title": "File patterns to include",
      "type": "array"
    },
    "generator": {
      "default": "adoc",
      "description": "The generator is responsible for creating the documentation from the extracted symbols. The generator uses the extracted symbols and the templates to create the documentation. The generator can create different types of documentation such as HTML, XML, and AsciiDoc.",
      "enum": [
        "adoc",
        "html",
        "xml"
      ],
      "title": "Generator used to create the documentation"
    },
    "ignore-failures": {
      "default": false,
      "description": "When set to true, MrDocs continues to generate the documentation even if there are AST visitation failures. AST visitation failures occur when the source code contains constructs that are not supported by MrDocs.",
      "title": "Whether AST visitation failures should not stop the program",
      "type": "boolean"
    },
    "ignore-map-errors": {
      "default": false,
      "description": "When set to true, MrDocs continues to generate the documentation even if some files are not mapped correctly. Files are not mapped correctly when the source file is not found or the compilation database does not contain the compiler flags for the source file.",
      "title": "Continue if files are not mapped correctly",
      "type": "boolean"
    },
    "implementation-defined": {
      "default": [],
      "description": "Symbols that match one of these filters are tagged as \"implementation-defined\" in the documentation, and so do symbols in scopes tagged as \"implementation-defined\". This option is used to exclude symbols from the documentation that are considered part of the private API of the project. An \"implementation-defined\" symbol has no documentation page in the output. If any other symbol refers to it, the reference is rendered as \"implementation-defined\". See the documentation for \"include-symbol\" for the pattern syntax.",
      "items": {
        "type": "string"
      },
      "title": "Symbols rendered as \"implementation-defined\"",
      "type": "array"
    },
    "include-symbols": {
      "default": [],
      "description": "If any patterns are defined here, only symbols that match one of these patterns are extracted. The patterns are applied to the fully qualified name of the symbol without any leading \"::\". A single \"*\" will match all symbols in the namespace. Double \"**\" will match all symbols in the namespace and its subnamespaces. The patterns also support \"?\" for any chars, \"[<chars>]\" for charsets, \"[^<chars>]\" for inverted charsets, and \"{<glob>,...}\" for alternatives.",
      "items": {
        "type": "string"
      },
      "title": "Symbol patterns to include",
      "type": "array"
    },
    "includes": {
      "default": [],
      "description": "Include paths. These paths are used to add directories to the include search path. The include search path is used to search for headers. The headers are used to provide declarations and definitions of symbols. The headers are part of the project and are checked for warnings and errors.",
      "items": {
        "type": "string"
      },
      "title": "Include paths",
      "type": "array"
    },
    "input": {
      "default": [
        "<source-root>/."
      ],
      "description": "Input directories to extract. Only symbols defined in files in these directories are extracted. The paths are relative to the mrdocs configuration file.",
      "items": {
        "type": "string"
      },
      "title": "Input directories to extract symbols from",
      "type": "array"
    },
    "legible-names": {
      "default": true,
      "description": "Use legible names for ids in the documentation. When set to true, MrDocs uses legible names for symbols in the documentation. These are symbols that are legible but still safe for URLs. When the option is set to false, MrDocs uses a hash of the symbol ID.",
      "title": "Use legible names",
      "type": "boolean"
    },
    "libc-includes": {
      "default": [
        "<mrdocs-root>/share/mrdocs/headers/libc-stubs"
      ],
      "description": "When `use-system-libc` is disabled, the C standard library headers are available in these paths.",
      "items": {
        "type": "string"
      },
      "title": "Standard Library include paths",
      "type": "array"
    },
    "multipage": {
      "default": true,
      "description": "Generates a multipage documentation. The output directory must be a directory. This option acts as a hint to the generator to create a multipage documentation. Whether the hint is followed or not depends on the generator.",
      "title": "Generate a multipage documentation",
      "type": "boolean"
    },
    "output": {
      "default": "<config-dir>/reference-output",
      "description": "Multipage generators expect a directory. Single page generators expect a file or a directory where the file will be created. If the directory does not exist, it will be created.",
      "title": "Directory or file for generating output",
      "type": "string"
    },
    "private-bases": {
      "default": true,
      "description": "Determine whether private base classes should be extracted",
      "title": "Extraction policy for private base classes",
      "type": "boolean"
    },
    "private-members": {
      "default": false,
      "description": "Determine whether private class members should be extracted",
      "title": "Extraction policy for private class members",
      "type": "boolean"
    },
    "recursive": {
      "default": true,
      "description": "Recursively include files. When set to true, MrDocs includes files in subdirectories of the input directories. When set to false, MrDocs includes only the files in the input directories.",
      "title": "Recursively include files from \"input\" paths",
      "type": "boolean"
    },
    "report": {
      "default": 1,
      "description": "The reporting level determines the amount of information displayed during the generation of the documentation. The levels are: 0 - no output, 1 - errors only, 2 - errors and warnings, 3 - errors, warnings, and information, 4 - errors, warnings, information, and debug information.",
      "maximum": 4,
      "minimum": 0,
      "title": "The minimum reporting level: 0 to 4",
      "type": "integer"
    },
    "see-below": {
      "default": [],
      "description": "Symbols that match one of these filters are tagged as \"see-below\" in the documentation, and so do symbols in scopes tagged as \"see-below\". This option is used to remove details about symbols that are considered part of the private API of the project. In the documentation page for this symbol, the synopsis of the implementation is rendered as \"see-below\" and members of scopes (such as a namespace or record) are not listed. The rest of the documentation is rendered as usual. See the documentation for \"include-symbol\" for the pattern syntax.",
      "items": {
        "type": "string"
      },
      "title": "Symbols rendered as \"see-below\"",
      "type": "array"
    },
    "sfinae": {
      "default": true,
      "description": "When set to true, MrDocs detects SFINAE expressions in the source code and extracts them as part of the documentation. Expressions such as `std::enable_if<...>` are detected, removed, and documented as a requirement.",
      "title": "Detect and reduce SFINAE expressions",
      "type": "boolean"
    },
    "source-root": {
      "default": "<config-dir>",
      "description": "Path to the root directory of the source code. This path is used as a default for input files and a base for relative paths formed from absolute paths.",
      "title": "Path to the root directory of the source code",
      "type": "string"
    },
    "stdlib-includes": {
      "default": [
        "<mrdocs-root>/share/mrdocs/headers/libcxx",
        "<mrdocs-root>/share/mrdocs/headers/clang"
      ],
      "description": "When `use-system-stdlib` is disabled, the C++ standard library headers are available in these paths.",
      "items": {
        "type": "string"
      },
      "title": "C++ Standard Library include paths",
      "type": "array"
    },
    "system-includes": {
      "default": [],
      "description": "System include paths. These paths are used to add directories to the system include search path. The system include search path is used to search for system headers. The system headers are headers that are provided by the system and are not part of the project. The system headers are used to provide the standard library headers and other system headers. The system headers are not part of the project and are not checked for warnings and errors.",
      "items": {
        "type": "string"
      },
      "title": "System include paths",
      "type": "array"
    },
    "tagfile": {
      "default": "<output>/reference.tag.xml",
      "description": "Specifies the full path (filename) where the generated tagfile should be saved. If left empty, no tagfile will be generated.",
      "title": "Path for the tagfile",
      "type": "string"
    },
    "use-system-libc": {
      "default": false,
      "description": "To achieve reproducible results, MrDocs bundles the LibC headers with its definitions. To use the C standard library available in the system instead, set this option to true.",
      "title": "Use the system C standard library",
      "type": "boolean"
    },
    "use-system-stdlib": {
      "default": false,
      "description": "To achieve reproducible results, MrDocs bundles the LibC++ headers. To use the C++ standard library available in the system instead, set this option to true.",
      "title": "Use the system C++ standard library",
      "type": "boolean"
    },
    "verbose": {
      "default": false,
      "description": "Verbose output. When set to true, MrDocs outputs additional information during the generation of the documentation.",
      "title": "Verbose output",
      "type": "boolean"
    }
  },
  "required": [],
  "title": "MrDocs Configuration",
  "type": "object"
}