<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

<!-- All unique_ptr show their contents instead -->
    <Type Name="std::unique_ptr&lt;*&gt;">
        <SmartPointer Usage="Minimal">_Mypair._Myval2</SmartPointer>
        <DisplayString Condition="_Mypair._Myval2 == 0">nullptr</DisplayString>
        <DisplayString Condition="_Mypair._Myval2 != 0">{*_Mypair._Myval2}</DisplayString>
        <Expand>
            <ExpandedItem Condition="_Mypair._Myval2 != 0">_Mypair._Myval2</ExpandedItem>
        </Expand>
    </Type>

<!-- Info Types -->
    <Type Name="clang::mrdocs::Info" Inheritable="false" IncludeView="noinherit">
	</Type>

	<Type Name="clang::mrdocs::IsInfo&lt;*&gt;" Inheritable="false">
		<Expand>
			<ExpandedItem>(Info*)this,view(noinherit)nd</ExpandedItem>
		</Expand>
	</Type>

    <Type Name="clang::mrdocs::Info" Inheritable="false" ExcludeView="noinherit">
		<AlternativeType Name="clang::mrdocs::NamespaceInfo"/>
		<AlternativeType Name="clang::mrdocs::RecordInfo"/>
		<AlternativeType Name="clang::mrdocs::FunctionInfo"/>
		<AlternativeType Name="clang::mrdocs::EnumInfo"/>
		<AlternativeType Name="clang::mrdocs::TypedefInfo"/>
		<AlternativeType Name="clang::mrdocs::VariableInfo"/>
		<AlternativeType Name="clang::mrdocs::FieldInfo"/>
		<AlternativeType Name="clang::mrdocs::SpecializationInfo"/>
		<AlternativeType Name="clang::mrdocs::FriendInfo"/>
		<AlternativeType Name="clang::mrdocs::EnumeratorInfo"/>
		<AlternativeType Name="clang::mrdocs::GuideInfo"/>
		<AlternativeType Name="clang::mrdocs::AliasInfo"/>
		<AlternativeType Name="clang::mrdocs::UsingInfo"/>

		<DisplayString>{Kind,en} {Name} (ID = {id})</DisplayString>

		<Expand HideRawView="true">
			<ExpandedItem ExcludeView="noinherit">(Info*)this,view(noinherit)nd</ExpandedItem>
			<ExpandedItem Condition="Kind == InfoKind::Namespace">(NamespaceInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Record">(RecordInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Function">*(FunctionInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Enum">(EnumInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Typedef">(TypedefInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Variable">(VariableInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Field">(FieldInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Specialization">(SpecializationInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Friend">(FriendInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Enumerator">(EnumeratorInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Guide">(GuideInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Alias">(AliasInfo*)this,view(noinherit)</ExpandedItem>
		    <ExpandedItem Condition="Kind == InfoKind::Using">(UsingInfo*)this,view(noinherit)</ExpandedItem>
		</Expand>
	</Type>

    <Type Name="clang::mrdocs::SymbolID">
        <DisplayString Condition="strncmp((char*)this, (char*)&amp;SymbolID::invalid, 20) != 0">{data_[0],nvoXb}{data_[1],nvoXb}{data_[2],nvoXb}{data_[3],nvoXb}{data_[4],nvoXb}{data_[5],nvoXb}{data_[6],nvoXb}{data_[7],nvoXb}{data_[8],nvoXb}{data_[9],nvoXb}{data_[10],nvoXb}{data_[11],nvoXb}{data_[12],nvoXb}{data_[13],nvoXb}{data_[14],nvoXb}{data_[15],nvoXb}{data_[16],nvoXb}{data_[17],nvoXb}{data_[18],nvoXb}{data_[19],nvoXb}</DisplayString>
        <DisplayString>empty SymbolID</DisplayString>
        <Expand>
        </Expand>
    </Type>

    <Type Name="clang::mrdocs::Optional&lt;clang::mrdocs::SymbolID, *&gt;">
        <DisplayString Condition="strncmp((char*)t_.data_, (char*)&amp;SymbolID::invalid, 20) != 0">{t_}</DisplayString>
        <DisplayString>empty</DisplayString>
        <Expand>
        </Expand>
    </Type>

<!-- Error Types -->

    <Type Name="clang::mrdocs::Error">
        <DisplayString>{reason_}</DisplayString>
    </Type>

    <Type Name="clang::mrdocs::Expected&lt;*, *&gt;">
        <DisplayString Condition="has_value_">{val_}</DisplayString>
        <DisplayString Condition="! has_value_">{unex_}</DisplayString>

        <Expand>
            <ExpandedItem Condition="has_value_">val_</ExpandedItem>
            <ExpandedItem Condition="! has_value_">unex_</ExpandedItem>
        </Expand>
    </Type>

<!-- Dom Types -->

    <Type Name="clang::mrdocs::dom::String">
        <DisplayString Condition="psz_!=0">{psz_,s}</DisplayString>
        <DisplayString Condition="(((char*)(impl_+1))[0]&amp;0x80)!=0">{((char*)(impl_+1))+1,s}</DisplayString>
        <DisplayString Condition="(((char*)(impl_+1))[1]&amp;0x80)!=0">{((char*)(impl_+1))+2,s}</DisplayString>
        <DisplayString Condition="(((char*)(impl_+1))[2]&amp;0x80)!=0">{((char*)(impl_+1))+3,s}</DisplayString>
        <DisplayString Condition="(((char*)(impl_+1))[3]&amp;0x80)!=0">{((char*)(impl_+1))+4,s}</DisplayString>
        <DisplayString Condition="(((char*)(impl_+1))[4]&amp;0x80)!=0">{((char*)(impl_+1))+5,s}</DisplayString>
        <DisplayString Condition="(((char*)(impl_+1))[5]&amp;0x80)!=0">{((char*)(impl_+1))+6,s}</DisplayString>
        <DisplayString Condition="(((char*)(impl_+1))[6]&amp;0x80)!=0">{((char*)(impl_+1))+7,s}</DisplayString>
        <DisplayString Condition="(((char*)(impl_+1))[7]&amp;0x80)!=0">{((char*)(impl_+1))+8,s}</DisplayString>
        <DisplayString Condition="(((char*)(impl_+1))[8]&amp;0x80)!=0">{((char*)(impl_+1))+9,s}</DisplayString>
        <DisplayString Condition="(((char*)(impl_+1))[9]&amp;0x80)!=0">{((char*)(impl_+1))+10,s}</DisplayString>
        <DisplayString>[ doc::String ]</DisplayString>
    </Type>

    <Type Name="clang::mrdocs::dom::Array">
        <DisplayString>[ dom::Array ]</DisplayString>
    </Type>

    <Type Name="clang::mrdocs::dom::Object">
        <Intrinsic Name="as_default" Expression="dynamic_cast&lt;DefaultObjectImpl*&gt;(impl_._Ptr)"/>
        <Intrinsic Name="as_lazy" Expression="dynamic_cast&lt;LazyObjectImpl*&gt;(impl_._Ptr)"/>
        <Intrinsic Name="as_overlay" Expression="dynamic_cast&lt;OverlayObjectImpl*&gt;(impl_._Ptr)"/>
        <Intrinsic Name="as_hbs_helper" Expression="dynamic_cast&lt;HbsHelperObjectImpl*&gt;(impl_._Ptr)"/>
        <DisplayString>[ dom::Object ]</DisplayString>

        <Expand>
            <ExpandedItem Condition="as_default()">*as_default()</ExpandedItem>
            <ExpandedItem Condition="as_lazy()">*as_lazy()</ExpandedItem>
            <ExpandedItem Condition="as_overlay()">*as_overlay()</ExpandedItem>
            <ExpandedItem Condition="as_hbs_helper()">*as_hbs_helper()</ExpandedItem>
            <ExpandedItem Condition="! (as_default() || as_lazy() || as_overlay() || as_hbs_helper())">
                *(ObjectImpl*)impl_._Ptr
            </ExpandedItem>

        </Expand>
    </Type>

    <Type Name="clang::mrdocs::dom::Value">
        <DisplayString Condition="kind_==clang::mrdocs::dom::Kind::Undefined">undefined</DisplayString>
        <DisplayString Condition="kind_==clang::mrdocs::dom::Kind::Null">null</DisplayString>
        <DisplayString Condition="kind_==clang::mrdocs::dom::Kind::Boolean">{b_}</DisplayString>
        <DisplayString Condition="kind_==clang::mrdocs::dom::Kind::Integer">{i_}</DisplayString>
        <DisplayString Condition="kind_==clang::mrdocs::dom::Kind::String">{str_}</DisplayString>
        <DisplayString Condition="kind_==clang::mrdocs::dom::Kind::SafeString">{str_}</DisplayString>
        <DisplayString Condition="kind_==clang::mrdocs::dom::Kind::Array">{arr_}</DisplayString>
        <DisplayString Condition="kind_==clang::mrdocs::dom::Kind::Object">{obj_}</DisplayString>
        <DisplayString Condition="kind_==clang::mrdocs::dom::Kind::Function">{fn_}</DisplayString>
        <DisplayString>invalid</DisplayString>

        <Expand>
            <Item Condition="kind_==clang::mrdocs::dom::Kind::Boolean" Name="Value">b_</Item>
            <Item Condition="kind_==clang::mrdocs::dom::Kind::Integer" Name="Value">i_</Item>
            <ExpandedItem Condition="kind_==clang::mrdocs::dom::Kind::String">str_</ExpandedItem>
            <ExpandedItem Condition="kind_==clang::mrdocs::dom::Kind::SafeString">str_</ExpandedItem>
            <ExpandedItem Condition="kind_==clang::mrdocs::dom::Kind::Array">arr_</ExpandedItem>
            <ExpandedItem Condition="kind_==clang::mrdocs::dom::Kind::Object">obj_</ExpandedItem>
            <ExpandedItem Condition="kind_==clang::mrdocs::dom::Kind::Function">fn_</ExpandedItem>
        </Expand>
    </Type>

<!-- Javadocs -->
    <Type Name="std::vector&lt;std::unique_ptr&lt;clang::mrdocs::doc::Block,std::default_delete&lt;clang::mrdocs::doc::Block&gt;&gt;,std::allocator&lt;std::unique_ptr&lt;clang::mrdocs::doc::Block,std::default_delete&lt;clang::mrdocs::doc::Block&gt;&gt;&gt;&gt;">
        <DisplayString>doc::Block[{_Mypair._Myval2._Myend-_Mypair._Myval2._Myfirst}]</DisplayString>
        <Expand>
            <ArrayItems>
                <Size>_Mypair._Myval2._Myend-_Mypair._Myval2._Myfirst</Size>
                <ValuePointer>_Mypair._Myval2._Myfirst</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>
    <Type Name="std::vector&lt;std::unique_ptr&lt;clang::mrdocs::doc::Text,std::default_delete&lt;clang::mrdocs::doc::Text&gt;&gt;,std::allocator&lt;std::unique_ptr&lt;clang::mrdocs::doc::Text,std::default_delete&lt;clang::mrdocs::doc::Text&gt;&gt;&gt;&gt;">
        <DisplayString>doc::Block[{_Mypair._Myval2._Myend-_Mypair._Myval2._Myfirst}]</DisplayString>
        <Expand>
            <ArrayItems>
                <Size>_Mypair._Myval2._Myend-_Mypair._Myval2._Myfirst</Size>
                <ValuePointer>_Mypair._Myval2._Myfirst</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="clang::mrdocs::doc::Block" Inheritable="true">
        <DisplayString Condition="kind==Kind::admonition">
            [ Admonition {(*(clang::mrdocs::doc::Admonition*)this).admonish} ]</DisplayString>
        <DisplayString Condition="kind==Kind::brief">[ Brief ]</DisplayString>
        <DisplayString Condition="kind==Kind::code">[ Code] </DisplayString>
        <DisplayString Condition="kind==Kind::heading">[ doc::Heading ]</DisplayString>
        <DisplayString Condition="kind==Kind::list_item">[ doc::ListItem ]</DisplayString>
        <DisplayString Condition="kind==Kind::paragraph">[ doc::Paragraph ]</DisplayString>
        <DisplayString Condition="kind==Kind::param">[ doc::Param ]</DisplayString>
        <DisplayString Condition="kind==Kind::returns">[ doc::Returns ]</DisplayString>
        <DisplayString Condition="kind==Kind::tparam">[ doc::TParam ]</DisplayString>
        <DisplayString>{kind}</DisplayString>
        <Expand>
            <ExpandedItem>children</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="clang::mrdocs::doc::Text" Inheritable="true">
        <DisplayString Condition="kind==Kind::styled">[ doc::Styled ]</DisplayString>
        <DisplayString Condition="kind==Kind::link">[ doc::Link ]</DisplayString>
        <DisplayString>{string}</DisplayString>
        <Expand>
        </Expand>
    </Type>

    <!-- <mrdocs/Support/JavaScript.hpp> -->

    <Type Name="clang::mrdocs::js::Access">
        <DisplayString>[ js::Access ]</DisplayString>
    </Type>

    <Type Name="clang::mrdocs::js::Scope">
        <DisplayString>[ js::Scope ]</DisplayString>
    </Type>

    <Type Name="clang::mrdocs::js::Param">
        <DisplayString Condition="kind_==Param::Kind::Undefined">undefined</DisplayString>
        <DisplayString Condition="kind_==Param::Kind::Null">null</DisplayString>
        <DisplayString Condition="kind_==Param::Kind::Boolean">{b_}</DisplayString>
        <DisplayString Condition="kind_==Param::Kind::Integer">{i_}</DisplayString>
        <DisplayString Condition="kind_==Param::Kind::Unsigned">{u_}</DisplayString>
        <DisplayString Condition="kind_==Param::Kind::Double">{d_}</DisplayString>
        <DisplayString Condition="kind_==Param::Kind::String">{s_}</DisplayString>
        <DisplayString Condition="kind_==Param::Kind::Value">{idx_}</DisplayString>
        <DisplayString Condition="kind_==Param::Kind::DomArray">{arr_}</DisplayString>
        <DisplayString Condition="kind_==Param::Kind::DomObject">{obj_}</DisplayString>
    </Type>

    <Type Name="clang::mrdocs::js::Value">
        <DisplayString>duk_value@{idx_}</DisplayString>
    </Type>

    <!-- ASTVisitor -->

    <Type Name="clang::mrdocs::FilterPattern">
        <DisplayString>{pattern_}</DisplayString>
    </Type>
    <Type Name="clang::mrdocs::FilterNode">
        <Intrinsic Name="n_children" Expression="(size_t)(Children._Mypair._Myval2._Mylast - Children._Mypair._Myval2._Myfirst)" />
        <!--
        <DisplayString Condition="n_children() == 1">Excluded = {int(Excluded)}, {n_children()} child, Pattern = {Pattern}</DisplayString>
        <DisplayString Condition="n_children() != 0">Excluded = {int(Excluded)}, {n_children()} children, Pattern = {Pattern}</DisplayString>
        <DisplayString>Excluded = {int(Excluded)}, Pattern = {Pattern}</DisplayString>
        -->
        <DisplayString Condition="n_children() == 0">Excluded = {int(Excluded)}, Pattern = {Pattern}</DisplayString>
        <DisplayString Condition="n_children() == 1">Excluded = {int(Excluded)}, Pattern = {Pattern}, {n_children()} child</DisplayString>
        <DisplayString Condition="n_children() != 0">Excluded = {int(Excluded)}, Pattern = {Pattern}, {n_children()} children</DisplayString>
        <Expand>
            <Item Name="Pattern">Pattern</Item>
            <Item Name="Excluded">Excluded</Item>
            <Item Name="Explicit">Explicit</Item>
            <Synthetic Name="Children" Condition="n_children() != 0">
                <DisplayString>{Children._Mypair._Myval2._Myfirst,[n_children()]na}</DisplayString>
                <Expand>
                    <ArrayItems>
                        <Size>n_children()</Size>
                        <ValuePointer>Children._Mypair._Myval2._Myfirst</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
        </Expand>
    </Type>

</AutoVisualizer>
