name: Continuous Integration

on:
  push:
    branches:
      - develop
      - master
      - '*'
    tags:
      - "v*.*.*"

  pull_request:
    branches:
      - develop

concurrency:
  group: ${{format('{0}:{1}', github.repository, github.ref)}}
  cancel-in-progress: true

jobs:
  cpp-matrix:
    runs-on: ubuntu-latest
    name: Generate Test Matrix
    outputs:
      matrix: ${{ steps.cpp-matrix.outputs.matrix }}
    steps:
      - name: Clone cpp-actions
        uses: actions/checkout@v3

      - name: Generate Test Matrix
        uses: alandefreitas/cpp-actions/cpp-matrix@v1.8.2
        id: cpp-matrix
        with:
          compilers: |
            gcc 13.1
            clang 17
            msvc 14.34
          standards: '20'
          latest-factors: ''
          factors: ''

  build:
    needs: cpp-matrix

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.cpp-matrix.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runs-on }}
    container: ${{ (matrix.compiler == 'gcc' && 'ubuntu:22.04') || matrix.container }}
    env: ${{ matrix.env }}
    permissions:
      contents: write

    steps:
      - name: Install git
        if: ${{ matrix.container }}
        uses: alandefreitas/cpp-actions/package-install@v1.8.2
        with:
          apt-get: git

      - name: Clone MrDocs
        uses: actions/checkout@v3

      - name: Setup C++
        uses: alandefreitas/cpp-actions/setup-cpp@v1.8.2
        id: setup-cpp
        with:
          compiler: ${{ matrix.compiler }}
          version: ${{ matrix.version }}
          check-latest: ${{ matrix.compiler == 'clang' }}

      - name: Install packages
        uses: alandefreitas/cpp-actions/package-install@v1.8.2
        id: package-install
        with:
          apt-get: ${{ matrix.install }} openjdk-11-jdk ninja-build pkg-config libncurses-dev
          vcpkg: fmt duktape libxml2[tools]
          cc: ${{ steps.setup-cpp.outputs.cc || matrix.cc }}
          ccflags: ${{ matrix.ccflags }}
          cxx: ${{ steps.setup-cpp.outputs.cxx || matrix.cxx }}
          cxxflags: ${{ matrix.cxxflags }}

      - name: Install LLVM
        id: llvm-install
        shell: bash
        run: |
          set -xe
          config_type="Release"
          filename="${{ runner.os }}-$config_type-29b20829.${{ ( runner.os == 'Windows' && '7z' ) || 'tar.xz' }}"
          url="https://mrdox.com/llvm+clang/$filename"

          # Download
          if command -v curl &> /dev/null
          then
              curl -L -o "$filename" "$url"
          elif command -v wget &> /dev/null
          then
              wget -O "$filename" "$url"
          else
              echo "Neither curl nor wget are available"
              exit 1
          fi

          # Extract
          llvm_root="${{runner.tool_cache}}/llvm+clang"
          llvm_root=$(echo "$llvm_root" | sed 's/\\/\//g')
          mkdir -p "$llvm_root"
          if [ "${{ runner.os }}" != "Windows" ]; then
              tar -xvf "$filename" -C "$llvm_root" --strip-components=1
          else
              7z x "$filename"
              cd "$config_type"
              mv * "$llvm_root"
              cd ..
              rm -rf "$config_type"
          fi

          # Export
          echo "llvm_root=$llvm_root"
          echo -E "llvm-root=$llvm_root" >> $GITHUB_OUTPUT

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: CMake Workflow
        uses: alandefreitas/cpp-actions/cmake-workflow@v1.8.2
        with:
          cmake-version: '>=3.20'
          cxxstd: ${{ matrix.cxxstd }}
          cc: ${{ steps.setup-cpp.outputs.cc || matrix.cc }}
          ccflags: ${{ matrix.ccflags }}
          cxx: ${{ steps.setup-cpp.outputs.cxx || matrix.cxx }}
          cxxflags: ${{ matrix.cxxflags }}${{ ( matrix.compiler == 'gcc' && ' -static-libstdc++') || '' }}${{ ( matrix.asan && ' -static-libasan') || '' }}${{ ( matrix.tsan && ' -static-libtsan') || '' }}
          generator: Ninja
          toolchain: ${{ steps.package-install.outputs.vcpkg_toolchain || steps.package-install.outputs.vcpkg-toolchain }}
          build-type: ${{ matrix.build-type }}
          install-prefix: .local
          extra-args: |
            -D LLVM_ROOT="${{ steps.llvm-install.outputs.llvm-root || '/usr/local' }}"
            -D Clang_ROOT="${{ steps.llvm-install.outputs.llvm-root || '/usr/local' }}"
          export-compile-commands: true
          run-tests: true
          install: true
          package: ${{ matrix.is-main }}
          package-dir: packages
          package-generators: ${{ (runner.os == 'Windows' && '7Z ZIP WIX') || 'TGZ TXZ' }}
          package-artifact: false

      - name: Upload GitHub Release Artifacts
        if: ${{ matrix.is-main && matrix.compiler != 'clang' }}
        uses: actions/upload-artifact@v3
        with:
          name: release-packages-${{ runner.os }}
          path: build/packages
          retention-days: 1

      - name: FlameGraph
        uses: alandefreitas/cpp-actions/flamegraph@v1.8.2
        if: matrix.time-trace
        with:
          build-dir: build
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Codecov
        if: ${{ matrix.coverage}}
        uses: codecov/codecov-action@v3.1.4
        with:
          directory: './build'
          fail_ci_if_error: true
          gcov: true
          verbose: true

  docs:
    needs: build
    defaults:
      run:
        shell: bash

    name: Documentation
    timeout-minutes: 30
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: Clone mrdocs
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Generate Site
        working-directory: docs
        run: |
          npm install
          master_antora_exists=$(curl --silent --fail --head https://github.com/cppalliance/mrdocs/blob/master/docs/antora.yml >/dev/null && echo "true" || echo "false")
          develop_antora_exists=$(curl --silent --fail --head https://github.com/cppalliance/mrdocs/blob/develop/docs/antora.yml >/dev/null && echo "true" || echo "false")
          if [ "$master_antora_exists" == "true" ] && [ "$develop_antora_exists" == "true" ]; then
              # Antora is set up in both master and develop: render complete playbook
              npx antora antora-playbook.yml
          else
              # Antora is not set up in master and develop yet: render local playbook while integration is not complete
              # The local playbook is used for local development and for the documentation included in the release
              npx antora local-antora-playbook.yml
          fi

      - name: Publish to GitHub Pages
        if: ${{ github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build/site
          force_orphan: true

      - name: Update website
        if: ${{ github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          # Add SSH key
          mkdir -p /home/runner/.ssh
          ssh-keyscan dev-websites.cpp.al >> /home/runner/.ssh/known_hosts
          echo "${{ secrets.DEV_WEBSITES_SSH_KEY }}" > /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add /home/runner/.ssh/github_actions

          # Copy files
          chmod 755 -R $(pwd)/docs/build/site
          scp -r $(pwd)/docs/build/site/* ubuntu@dev-websites.cpp.al:/var/www/mrdox.com/

  demos:
    needs: build
    defaults:
      run:
        shell: bash

    name: Demos
    timeout-minutes: 120
    runs-on: ubuntu-22.04
    container: ubuntu:23.04

    permissions:
      contents: write

    steps:
      - name: Clone mrdocs
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: release-packages-Linux
          path: packages

      - name: List artifacts
        run: ls -R
        working-directory: packages

      - name: Setup C++
        uses: alandefreitas/cpp-actions/setup-cpp@v1.8.2
        id: setup-cpp
        with:
          compiler: clang
          version: 16
          check-latest: true

      - name: Install packages
        uses: alandefreitas/cpp-actions/package-install@v1.8.2
        id: package-install
        with:
          apt-get: libstdc++-12-dev asciidoctor cmake bzip2
          cc: ${{ steps.setup-cpp.outputs.cc }}
          cxx: ${{ steps.setup-cpp.outputs.cxx }}

      - name: Install mrdocs from release package
        run: |
          set -x
          find packages -name 'MrDocs-*-Linux.tar.gz' -exec tar -vxzf {} -C /usr/local --strip-components=1 \;
          mrdocs --version

      - name: Clone Boost.URL
        uses: alandefreitas/cpp-actions/boost-clone@v1.8.2
        id: boost-url-clone
        with:
          branch: master
          modules: url
          boost-dir: boost
          modules-scan-paths: '"test example"'
          modules-exclude-paths: ''
          trace-commands: true

      - name: Generate demos
        run: |
          set -x
          cmake --help
          cmake --system-information
          config_template=$(printf '%s\n'                                      \
            "verbose: true"                                                    \
            "source-root: ."                                                   \
            "base-url: 'https://github.com/boostorg/url/blob/master/include/'" \
            "generate: %s"                                                     \
            "multipage: %s"                                                    \
            "inaccessible-members: never"                                      \
            "inaccessible-bases: never"                                        \
            "cmake: -D BOOST_URL_BUILD_TESTS=OFF -D BOOST_URL_BUILD_EXAMPLES=OFF -D CMAKE_EXPORT_COMPILE_COMMANDS=ON -D CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES='$default_includes' -D CMAKE_CXX_COMPILER=${{ steps.setup-cpp.outputs.cxx  }} -D CMAKE_C_COMPILER=${{ steps.setup-cpp.outputs.cc  }}" \
            "filters:"                                                         \
            "  symbols:"                                                       \
            "    exclude:"                                                     \
            "      - 'boost::urls::detail'"                                    \
            "      - 'boost::urls::*::detail'"                                 \
          )
          set -x
          for variant in single multi; do
            for format in adoc html xml; do
              [[ $variant = multi ]] && multiline="true" || multiline="false"
              printf "$config_template\n" $format $multiline > $(pwd)/boost/libs/url/mrdocs.yml
              mkdir -p "demos/boost-url/$variant/$format"
              mrdocs --config="$(pwd)/boost/libs/url/mrdocs.yml" "$(pwd)/boost/libs/url/" --output="$(pwd)/demos/boost-url/$variant/$format"
            done
            asciidoctor -d book -R "$(pwd)/demos/boost-url/$variant/adoc" -D "$(pwd)/demos/boost-url/$variant/adoc-asciidoc" "$(pwd)/demos/boost-url/$variant/adoc/**/*.adoc"
          done
          tar -cjf $(pwd)/demos.tar.gz -C $(pwd)/demos --strip-components 1 .
          echo "demos_path=$(pwd)/demos.tar.gz" >> $GITHUB_ENV

      - name: Upload demo artifacts
        uses: actions/upload-artifact@v3
        with:
          name: demos
          path: ${{ env.demos_path }}
          retention-days: 1

      - name: Update website demos
        if: ${{ github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          # Add SSH key
          mkdir -p /home/runner/.ssh
          ssh-keyscan dev-websites.cpp.al >> /home/runner/.ssh/known_hosts
          echo "${{ secrets.DEV_WEBSITES_SSH_KEY }}" > /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add /home/runner/.ssh/github_actions

          # Copy files
          demo_dir="/var/www/mrdox.com/demos/${{ github.ref_name }}"
          ssh ubuntu@dev-websites.cpp.al "rm -rf $demo_dir/boost-url; mkdir -p $demo_dir/boost-url"
          chmod 755 -R $(pwd)/demos
          scp -r $(pwd)/demos/* ubuntu@dev-websites.cpp.al:$demo_dir/

  releases:
    needs: build
    defaults:
      run:
        shell: bash

    name: Releases
    timeout-minutes: 120
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: Clone mrdocs
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: release-packages-Linux
          path: build

      - uses: actions/download-artifact@v3
        with:
          name: release-packages-Windows
          path: build

      - name: List artifacts
        run: ls -R
        working-directory: build

      - name: Create changelog
        uses: alandefreitas/cpp-actions/create-changelog@v1.8.2
        with:
          output-path: CHANGELOG.md
          thank-non-regular: ${{ startsWith(github.ref, 'refs/tags/') }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          limit: 150

      - name: Create GitHub Package Release
        if: ${{ github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
        uses: softprops/action-gh-release@v1
        with:
          files: build/MrDocs-?.?.?-*.*
          name: ${{ github.ref_name || github.ref }}
          tag_name: ${{ github.ref_name || github.ref }}${{ ((!startsWith(github.ref, 'refs/tags/')) && '-release') || '' }}
          body_path: CHANGELOG.md
          prerelease: false
          draft: false
          token: ${{ github.token }}

      - uses: dev-drprasad/delete-older-releases@v0.2.1
        if: ${{ github.event_name == 'push' && contains(fromJSON('["master", "develop"]'), github.ref_name) }}
        with:
          keep_latest: 1
          delete_tag_pattern: ${{ github.ref_name || github.ref }}${{ ((!startsWith(github.ref, 'refs/tags/')) && '-release') || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

