name: Continuous Integration

on:
  push:
    branches:
      - develop
      - master
      - '*'
    tags:
      - "v*.*.*"

  pull_request:
    branches:
      - develop

concurrency:
  group: ${{format('{0}:{1}', github.repository, github.ref)}}
  cancel-in-progress: true

jobs:
  cpp-matrix:
    runs-on: ubuntu-latest
    name: Generate Test Matrix
    outputs:
      matrix: ${{ steps.cpp-matrix.outputs.matrix }}
    steps:
      - name: Generate Test Matrix
        uses: alandefreitas/cpp-actions/cpp-matrix@v1.8.2
        id: cpp-matrix
        with:
          compilers: |
            gcc 13.1
            clang 17
            msvc 14.34
          standards: '20'
          # Set up a factor to build the main package on Ubuntu20.
          # We use this factor with clang because it can be more easily installed
          # from source on Ubuntu20.
          # When this factor is set, we'll build the main package with our own clang-bin
          # and libc++, which is then packaged for the release.
          # This creates a version of MrDocs that works on Ubuntu >=20.04.
          latest-factors: |
            clang Ubuntu20-Release
          factors: ''


  build:
    needs: cpp-matrix

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.cpp-matrix.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runs-on }}
    container: ${{ (matrix.ubuntu20-release && 'ubuntu:20.04') || matrix.container }}
    env: ${{ matrix.env }}
    permissions:
      contents: write

    steps:
      - name: Clone MrDocs
        uses: actions/checkout@v3

      - name: Parameters
        id: parameters
        run: |
          set -x
          echo -E "llvm-hash=5b959310b0fae723bd119ed8815bf1cb1a8c67d4" >> $GITHUB_OUTPUT
          echo -E "llvm-build-preset=${{ runner.os == 'Windows' && 'release-win' || 'release-unix' }}" >> $GITHUB_OUTPUT
          cd ..
          llvm_root=$(pwd)/third-party/llvm-project/install
          if [[ ${{ runner.os }} == 'Windows' ]]; then
              llvm_root=$(echo "$llvm_root" | sed 's/\\/\//g')
              llvm_root=$(echo $llvm_root | sed 's|^/d/|D:/|')
              echo "$llvm_root"
          fi
          echo -E "llvm-root=$llvm_root" >> $GITHUB_OUTPUT
          
          # Clang bin will be used when building the main package
          # This is a recent version of clang built from source on ubuntu-20.04
          if [[ "${{ matrix.ubuntu20-release && 'true' || 'false' }}" == 'true' ]]; then
              clang_root=$(pwd)/third-party/llvm-project/install0
              echo -E "clang-root=$clang_root" >> $GITHUB_OUTPUT          
              clang_bin="$clang_root"/bin/clang
              echo -E "clang-bin=$clang_bin" >> $GITHUB_OUTPUT          
              clangpp_bin="$clang_root/bin/clang++"
              echo -E "clangpp-bin=$clangpp_bin" >> $GITHUB_OUTPUT
              # https://libcxx.llvm.org//UsingLibcxx.html#using-a-custom-built-libc
              # https://stackoverflow.com/questions/46765489/how-to-static-link-with-clang-libc
              clang_flags=" -nostdinc++ -nostdlib++ -isystem $clang_root/include/c++/v1 -isystem $clang_root/include/x86_64-unknown-linux-gnu/c++/v1 -L $clang_root/lib/x86_64-unknown-linux-gnu -Wl,-rpath,$clang_root/lib/x86_64-unknown-linux-gnu -lc++ -lc++abi -Wno-error=unused-command-line-argument "
              echo -E "clang-flags=$clang_flags" >> $GITHUB_OUTPUT
              clang_static_flags=" $clang_flags -static "
              echo -E "clang-static-flags=$clang_static_flags" >> $GITHUB_OUTPUT
          fi

      - name: Setup CMake
        uses: alandefreitas/cpp-actions/setup-cmake@v1.8.2
        id: setup-cmake
        with:
          version: ${{ matrix.compiler == 'clang' && '3.26' || '>=3.26' }}
          check-latest: 'true'
          update-environment: 'true'

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4
        if: ${{ runner.os == 'Windows' }}

      - name: Setup C++
        uses: alandefreitas/cpp-actions/setup-cpp@v1.8.2
        # If not matrix.ubuntu20-release because we'll use
        # our own clang-bin otherwise
        if: ${{ !matrix.ubuntu20-release }}
        id: setup-cpp
        with:
          compiler: ${{ matrix.compiler }}
          version: ${{ matrix.version }}
          check-latest: ${{ matrix.compiler == 'clang' }}

      - name: Install System Packages
        uses: alandefreitas/cpp-actions/package-install@v1.8.2
        id: package-install
        env:
          DEBIAN_FRONTEND: 'noninteractive'
          TZ: 'Etc/UTC'
        with:
          apt-get: ${{ matrix.install }} git build-essential python3 curl openjdk-11-jdk ninja-build pkg-config libncurses-dev libxml2-utils
          cc: ${{ steps.setup-cpp.outputs.cc || matrix.cc }}
          ccflags: ${{ matrix.ccflags }}
          cxx: ${{ steps.setup-cpp.outputs.cxx || matrix.cxx }}
          cxxflags: ${{ matrix.cxxflags }}

      # Clang built with GCC
      - name: Clang Binaries
        id: clang-cache
        if: matrix.ubuntu20-release
        uses: actions/cache@v4
        with:
          path: ${{ steps.parameters.outputs.clang-root }}
          key: clang-${{ runner.os }}-${{ matrix.compiler }}-custom-built-${{ steps.parameters.outputs.llvm-build-preset }}-${{ steps.parameters.outputs.llvm-hash }}-${{ (matrix.ubuntu20-release && 'ubuntu:20.04') || matrix.container || matrix.runs-on }}

      - name: Install Clang
        id: clang-install
        if: matrix.ubuntu20-release && steps.clang-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          # LLVM is be installed with the default compiler
          set -x
          
          # Shallow clone LLVM_HASH in ../third-party/llvm
          cd ..
          mkdir -p third-party/llvm-project
          cd third-party/llvm-project
          llvm_project_root=$(pwd)
          git config --global init.defaultBranch master
          git config --global advice.detachedHead false
          git init
          git remote add origin https://github.com/llvm/llvm-project.git
          git fetch --depth 1 origin ${{ steps.parameters.outputs.llvm-hash }}
          git checkout FETCH_HEAD
          
          # Copy presets
          cp ../../mrdocs/third-party/llvm/CMakePresets.json ./llvm
          cp ../../mrdocs/third-party/llvm/CMakeUserPresets.json.example ./llvm/CMakeUserPresets.json
          
          # Build
          cd llvm
          llvm_root=$(pwd)
          cmake --version
          cmake -S . -B ./build0 --preset=${{ steps.parameters.outputs.llvm-build-preset }} -DCMAKE_CXX_COMPILER=${{ steps.setup-cpp.outputs.cxx || 'g++' }} -DCMAKE_C_COMPILER=${{ steps.setup-cpp.outputs.cc || 'gcc' }} -DCMAKE_INSTALL_PREFIX="../install0" -DCMAKE_INSTALL_PREFIX="../install0" ${{ (matrix.ubuntu20-release && ' -DCMAKE_CXX_FLAGS=" -static-libstdc++ -static-libgcc " -DLLVM_INCLUDE_RUNTIMES=ON -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" -DLLVM_RUNTIME_TARGETS="default" -DLLVM_ENABLE_PROJECTS="clang"') || '' }}
          if [[ ${{ runner.os }} == 'Linux' ]]; then
              cmake --build ./build0 --target help
          fi
          N_CORES=$(nproc 2>/dev/null || echo 1)
          cmake --build ./build0 --config Release --parallel $N_CORES
          cmake --install ./build0
          
          # Build libc++ with the new clang executable
          # https://libcxx.llvm.org/BuildingLibcxx.html#bootstrapping-build
          cmake --build ./build0 --target runtimes --config Release --parallel $N_CORES
          cmake --build ./build0 --target install-runtimes --config Release --parallel $N_CORES

      # This is the clang library binaries we build from source to have access to
      # clanglib for MrDocs.
      # On Ubuntu 20.04 we use our own clang-bin with libc++ so MrDocs can also link libc++.
      - name: LLVM Binaries
        id: llvm-cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.parameters.outputs.llvm-root }}
          key: llvm-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.version }}-${{ steps.parameters.outputs.llvm-build-preset }}-${{ steps.parameters.outputs.llvm-hash }}-${{ (matrix.ubuntu20-release && 'ubuntu:20.04') || matrix.container || matrix.runs-on }}

      - name: Install LLVM
        id: llvm-install
        if: steps.llvm-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          # LLVM is be installed with the default compiler
          set -x
          
          # Shallow clone LLVM_HASH in ../third-party/llvm
          cd ..
          # if third-party/llvm-project doesn't exist
          if [ ! -d third-party/llvm-project ]; then
              mkdir -p third-party/llvm-project
              cd third-party/llvm-project
              llvm_project_root=$(pwd)
              git config --global init.defaultBranch master
              git config --global advice.detachedHead false
              git init
              git remote add origin https://github.com/llvm/llvm-project.git
              git fetch --depth 1 origin ${{ steps.parameters.outputs.llvm-hash }}
              git checkout FETCH_HEAD
              
              # Copy presets
              cp ../../mrdocs/third-party/llvm/CMakePresets.json ./llvm
              cp ../../mrdocs/third-party/llvm/CMakeUserPresets.json.example ./llvm/CMakeUserPresets.json
          else
              cd third-party/llvm-project
              llvm_project_root=$(pwd)
          fi
          
          # Build
          cd llvm
          llvm_root=$(pwd)
          cmake --version
          cmake -S . -B ./build --preset=${{ steps.parameters.outputs.llvm-build-preset }} -DCMAKE_CXX_COMPILER=${{ steps.setup-cpp.outputs.cxx || steps.parameters.outputs.clangpp-bin || 'g++' }} -DCMAKE_C_COMPILER=${{ steps.setup-cpp.outputs.cc || steps.parameters.outputs.clang-bin || 'gcc' }} -DCMAKE_INSTALL_PREFIX="../install" -DCMAKE_INSTALL_PREFIX="../install" ${{ (matrix.ubuntu20-release && format('-DCMAKE_CXX_FLAGS="{0}"', steps.parameters.outputs.clang-flags)) || '' }}
          if [[ ${{ runner.os }} == 'Linux' ]]; then
              cmake --build ./build --target help
          fi
          N_CORES=$(nproc 2>/dev/null || echo 1)
          cmake --build ./build --config Release --parallel $N_CORES
          cmake --install ./build
          
      - name: Install Fmt
        id: fmt-install
        shell: bash
        run: |
          set -x
          cd ..
          mkdir -p third-party
          cd third-party
          git clone https://github.com/fmtlib/fmt --branch 10.2.1 --depth 1
          cd fmt
          cmake -S . -B ./build -D FMT_DOC=OFF -D FMT_TEST=OFF -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DCMAKE_CXX_COMPILER=${{ steps.setup-cpp.outputs.cxx || steps.parameters.outputs.clangpp-bin }} -DCMAKE_C_COMPILER=${{ steps.setup-cpp.outputs.cc || steps.parameters.outputs.clang-bin }} ${{ (matrix.ubuntu20-release && format('-DCMAKE_CXX_FLAGS="{0}"', steps.parameters.outputs.clang-flags)) || '' }}
          N_CORES=$(nproc 2>/dev/null || echo 1)
          cmake --build ./build --config ${{ matrix.build-type }} --parallel $N_CORES 
          cmake --install ./build --prefix ./install
          
          fmt_root=$(pwd)/install
          if [[ ${{ runner.os }} == 'Windows' ]]; then
              fmt_root=$(echo "$fmt_root" | sed 's/\\/\//g')
              fmt_root=$(echo $fmt_root | sed 's|^/d/|D:/|')
              echo "$fmt_root"
          fi
          echo -E "fmt-root=$fmt_root" >> $GITHUB_OUTPUT

      - name: Install Duktape
        id: duktape-install
        shell: bash
        run: |
          set -x
          cd ..
          mkdir -p third-party
          cd third-party
          curl -LJO https://github.com/svaarala/duktape/releases/download/v2.7.0/duktape-2.7.0.tar.xz
          tar -xf duktape-2.7.0.tar.xz
          cp ../mrdocs/third-party/duktape/CMakeLists.txt ./duktape-2.7.0/CMakeLists.txt
          cp ../mrdocs/third-party/duktape/duktapeConfig.cmake.in ./duktape-2.7.0/duktapeConfig.cmake.in
          cd duktape-2.7.0
          if [[ "${{ matrix.shared && 'true' || 'false' }}" == 'true' ]]; then
              sed -i 's/#undef DUK_F_DLL_BUILD/#define DUK_F_DLL_BUILD/g' "src/duk_config.h"
          else
              sed -i 's/#define DUK_F_DLL_BUILD/#undef DUK_F_DLL_BUILD/g' "src/duk_config.h"
          fi
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DCMAKE_CXX_COMPILER=${{ steps.setup-cpp.outputs.cxx || steps.parameters.outputs.clangpp-bin }} -DCMAKE_C_COMPILER=${{ steps.setup-cpp.outputs.cc || steps.parameters.outputs.clang-bin }} ${{ (matrix.ubuntu20-release && format('-DCMAKE_CXX_FLAGS="{0}"', steps.parameters.outputs.clang-flags)) || '' }}
          N_CORES=$(nproc 2>/dev/null || echo 1)
          cmake --build ./build --config ${{ matrix.build-type }} --parallel $N_CORES 
          cmake --install ./build --prefix ./install
          
          duktape_root=$(pwd)/install
          if [[ ${{ runner.os }} == 'Windows' ]]; then
              duktape_root=$(echo "$duktape_root" | sed 's/\\/\//g')
              duktape_root=$(echo $duktape_root | sed 's|^/d/|D:/|')
              echo "$duktape_root"
          fi
          echo -E "duktape-root=$duktape_root" >> $GITHUB_OUTPUT

      - name: Install Libxml2
        id: libxml2-install
        # The package libxml2-utils is already installed on linux.
        # We only need this step on Windows.
        if: ${{ runner.os == 'Windows' }}
        shell: bash
        run: |
          set -x
          cd ..
          mkdir -p third-party
          cd third-party
          git config --global init.defaultBranch master
          git config --global advice.detachedHead false
          git clone https://github.com/GNOME/libxml2 --branch v2.12.6 --depth 1
          cd libxml2
          
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release -DLIBXML2_WITH_PROGRAMS=ON -DLIBXML2_WITH_FTP=OFF -DLIBXML2_WITH_HTTP=OFF -DLIBXML2_WITH_ICONV=OFF -DLIBXML2_WITH_LEGACY=OFF -DLIBXML2_WITH_LZMA=OFF -DLIBXML2_WITH_ZLIB=OFF -DLIBXML2_WITH_ICU=OFF -DLIBXML2_WITH_TESTS=OFF -DLIBXML2_WITH_HTML=ON -DLIBXML2_WITH_C14N=ON -DLIBXML2_WITH_CATALOG=ON -DLIBXML2_WITH_DEBUG=ON -DLIBXML2_WITH_ISO8859X=ON -DLIBXML2_WITH_MEM_DEBUG=OFF -DLIBXML2_WITH_MODULES=ON -DLIBXML2_WITH_OUTPUT=ON -DLIBXML2_WITH_PATTERN=ON -DLIBXML2_WITH_PUSH=ON -DLIBXML2_WITH_PYTHON=OFF -DLIBXML2_WITH_READER=ON -DLIBXML2_WITH_REGEXPS=ON -DLIBXML2_WITH_SAX1=ON -DLIBXML2_WITH_SCHEMAS=ON -DLIBXML2_WITH_SCHEMATRON=ON -DLIBXML2_WITH_THREADS=ON -DLIBXML2_WITH_THREAD_ALLOC=OFF -DLIBXML2_WITH_TREE=ON -DLIBXML2_WITH_VALID=ON -DLIBXML2_WITH_WRITER=ON -DLIBXML2_WITH_XINCLUDE=ON -DLIBXML2_WITH_XPATH=ON -DLIBXML2_WITH_XPTR=ON -DCMAKE_CXX_COMPILER=${{ steps.setup-cpp.outputs.cxx || steps.parameters.outputs.clangpp-bin }} -DCMAKE_C_COMPILER=${{ steps.setup-cpp.outputs.cc || steps.parameters.outputs.clang-bin }} ${{ (matrix.ubuntu20-release && format('-DCMAKE_CXX_FLAGS="{0}"', steps.parameters.outputs.clang-flags)) || '' }}
          N_CORES=$(nproc 2>/dev/null || echo 1)
          cmake --build ./build --config ${{ matrix.build-type }} --parallel $N_CORES 
          cmake --install ./build --prefix ./install
          
          libxml2_root=$(pwd)/install
          if [[ ${{ runner.os }} == 'Windows' ]]; then
              libxml2_root=$(echo "$libxml2_root" | sed 's/\\/\//g')
              libxml2_root=$(echo $libxml2_root | sed 's|^/d/|D:/|')
              echo "$libxml2_root"
          fi
          echo -E "libxml2-root=$libxml2_root" >> $GITHUB_OUTPUT

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: CMake Workflow
        uses: alandefreitas/cpp-actions/cmake-workflow@v1.8.2
        with:
          cmake-version: ${{ matrix.compiler == 'clang' && '3.26' || '>=3.26' }}
          cxxstd: ${{ matrix.cxxstd }}
          cc: ${{ steps.setup-cpp.outputs.cc || steps.parameters.outputs.clang-bin || matrix.cc }}
          ccflags: ${{ matrix.ccflags }}${{ ( matrix.ubuntu20-release && ' -static') || '' }}${{ ( matrix.asan && ' -static-libasan') || '' }}${{ ( matrix.tsan && ' -static-libtsan') || '' }}
          cxx: ${{ steps.setup-cpp.outputs.cxx || steps.parameters.outputs.clangpp-bin || matrix.cxx }}
          cxxflags: ${{ matrix.cxxflags }} ${{ (matrix.ubuntu20-release && format('{0}', steps.parameters.outputs.clang-flags)) || '' }} ${{ ( matrix.asan && ' -static-libasan') || '' }}${{ ( matrix.tsan && ' -static-libtsan') || '' }}
          generator: Ninja
          toolchain: ${{ steps.package-install.outputs.vcpkg_toolchain || steps.package-install.outputs.vcpkg-toolchain }}
          build-type: ${{ matrix.build-type }}
          install-prefix: .local
          extra-args: |
            -D MRDOCS_BUILD_DOCS=OFF
            -D LLVM_ROOT=${{ steps.parameters.outputs.llvm-root }}
            -D Clang_ROOT=${{ steps.parameters.outputs.llvm-root }}
            -D duktape_ROOT=${{ steps.duktape-install.outputs.duktape-root }}
            -D Duktape_ROOT=${{ steps.duktape-install.outputs.duktape-root }}
            -D fmt_ROOT=${{ steps.fmt-install.outputs.fmt-root }}
            ${{ steps.libxml2-install.outputs.libxml2-root && format('-D libxml2_ROOT={0}', steps.libxml2-install.outputs.libxml2-root) || '' }}
            ${{ steps.libxml2-install.outputs.libxml2-root && format('-D LibXml2_ROOT={0}', steps.libxml2-install.outputs.libxml2-root) || '' }}
          export-compile-commands: true
          run-tests: true
          install: true
          # Package the Windows+MSVC version as usual.
          # Package the Linux version when in this special ubuntu20 mode.
          package: ${{ matrix.compiler == 'msvc' || matrix.ubuntu20-release }}
          package-dir: packages
          package-generators: ${{ (runner.os == 'Windows' && '7Z ZIP WIX') || 'TGZ TXZ' }}
          package-artifact: false

      # Upload the artifacts to the release packages.
      # Use the minimum retention days to keep the packages
      # for a short time. We're going to use them in the
      # next release job.
      - name: Upload GitHub Release Artifacts
        if: ${{ matrix.compiler == 'msvc' || matrix.ubuntu20-release }}
        uses: actions/upload-artifact@v3
        with:
          name: release-packages-${{ runner.os }}
          path: build/packages
          retention-days: 1

      - name: FlameGraph
        uses: alandefreitas/cpp-actions/flamegraph@v1.8.2
        if: matrix.time-trace
        with:
          build-dir: build
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Codecov
        if: ${{ matrix.coverage}}
        uses: codecov/codecov-action@v3.1.4
        with:
          directory: './build'
          fail_ci_if_error: true
          gcov: true
          verbose: true

  docs:
    needs: build
    defaults:
      run:
        shell: bash

    name: Documentation
    timeout-minutes: 30
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: Clone mrdocs
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Generate Site
        working-directory: docs
        run: |
          npm install
          master_antora_exists=$(curl --silent --fail --head https://github.com/cppalliance/mrdocs/blob/master/docs/antora.yml >/dev/null && echo "true" || echo "false")
          develop_antora_exists=$(curl --silent --fail --head https://github.com/cppalliance/mrdocs/blob/develop/docs/antora.yml >/dev/null && echo "true" || echo "false")
          if [ "$master_antora_exists" == "true" ] && [ "$develop_antora_exists" == "true" ]; then
              # Antora is set up in both master and develop: render complete playbook
              npx antora antora-playbook.yml
          else
              # Antora is not set up in master and develop yet: render local playbook while integration is not complete
              # The local playbook is used for local development and for the documentation included in the release
              npx antora local-antora-playbook.yml
          fi

      - name: Publish to GitHub Pages
        if: ${{ github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build/site
          force_orphan: true

      - name: Update website
        if: ${{ github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          # Add SSH key
          mkdir -p /home/runner/.ssh
          ssh-keyscan dev-websites.cpp.al >> /home/runner/.ssh/known_hosts
          echo "${{ secrets.DEV_WEBSITES_SSH_KEY }}" > /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add /home/runner/.ssh/github_actions

          # Copy files
          chmod 755 -R $(pwd)/docs/build/site
          scp -o StrictHostKeyChecking=no -r $(pwd)/docs/build/site/* ubuntu@dev-websites.cpp.al:/var/www/mrdox.com/

  demos:
    needs: build
    defaults:
      run:
        shell: bash

    name: Demos
    timeout-minutes: 120
    runs-on: ubuntu-22.04
    container: ubuntu:23.04

    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: release-packages-Linux
          path: packages

      - name: List artifacts
        run: ls -R
        working-directory: packages

      - name: Setup C++
        uses: alandefreitas/cpp-actions/setup-cpp@v1.8.2
        id: setup-cpp
        with:
          compiler: clang
          version: 16
          check-latest: true

      - name: Install packages
        uses: alandefreitas/cpp-actions/package-install@v1.8.2
        id: package-install
        with:
          apt-get: libstdc++-12-dev asciidoctor cmake bzip2
          cc: ${{ steps.setup-cpp.outputs.cc }}
          cxx: ${{ steps.setup-cpp.outputs.cxx }}

      - name: Install mrdocs from release package
        run: |
          set -x
          find packages -name 'MrDocs-*-Linux.tar.gz' -exec tar -vxzf {} -C /usr/local --strip-components=1 \;
          mrdocs --version

      - name: Clone Boost.URL
        uses: alandefreitas/cpp-actions/boost-clone@v1.8.2
        id: boost-url-clone
        with:
          branch: develop
          modules: url
          boost-dir: boost
          modules-scan-paths: '"test example"'
          modules-exclude-paths: ''
          trace-commands: true

      - name: Generate demos
        run: |
          set -x
          CXX="${{ steps.setup-cpp.outputs.cxx }}"
          export CXX
          CC="${{ steps.setup-cpp.outputs.cc }}"
          export CC
          
          for variant in single multi; do
            for format in adoc html xml; do
              [[ $variant = multi ]] && multipage="true" || multipage="false"
              sed -i "s/^\(\s*multipage:\s*\).*\$/\1$multipage/" $(pwd)/boost/libs/url/doc/mrdocs.yml
              sed -i "s/^\(\s*generate:\s*\).*\$/\1$format/" $(pwd)/boost/libs/url/doc/mrdocs.yml
              cat $(pwd)/boost/libs/url/doc/mrdocs.yml
              mkdir -p "demos/boost-url/$variant/$format"
              mrdocs --config="$(pwd)/boost/libs/url/doc/mrdocs.yml" "$(pwd)/boost/libs/url/" --output="$(pwd)/demos/boost-url/$variant/$format"
            done
            asciidoctor -d book -R "$(pwd)/demos/boost-url/$variant/adoc" -D "$(pwd)/demos/boost-url/$variant/adoc-asciidoc" "$(pwd)/demos/boost-url/$variant/adoc/**/*.adoc"
          done
          tar -cjf $(pwd)/demos.tar.gz -C $(pwd)/demos --strip-components 1 .
          echo "demos_path=$(pwd)/demos.tar.gz" >> $GITHUB_ENV

      - name: Upload demo artifacts
        uses: actions/upload-artifact@v3
        with:
          name: demos
          path: ${{ env.demos_path }}
          retention-days: 1

      - name: Update website demos
        if: ${{ github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          # Add SSH key
          mkdir -p /home/runner/.ssh
          ssh-keyscan dev-websites.cpp.al >> /home/runner/.ssh/known_hosts
          echo "${{ secrets.DEV_WEBSITES_SSH_KEY }}" > /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add /home/runner/.ssh/github_actions

          # Copy files
          demo_dir="/var/www/mrdox.com/demos/${{ github.ref_name }}"
          ssh ubuntu@dev-websites.cpp.al "rm -rf $demo_dir/boost-url; mkdir -p $demo_dir/boost-url"
          chmod 755 -R $(pwd)/demos
          scp -o StrictHostKeyChecking=no -r $(pwd)/demos/* ubuntu@dev-websites.cpp.al:$demo_dir/

  releases:
    needs: build
    defaults:
      run:
        shell: bash

    name: Releases
    timeout-minutes: 120
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: Clone mrdocs
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: release-packages-Linux
          path: build

      - uses: actions/download-artifact@v3
        with:
          name: release-packages-Windows
          path: build

      - name: List artifacts
        run: ls -R
        working-directory: build

      - name: Create changelog
        uses: alandefreitas/cpp-actions/create-changelog@v1.8.2
        with:
          output-path: CHANGELOG.md
          thank-non-regular: ${{ startsWith(github.ref, 'refs/tags/') }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          limit: 150

      - name: Create GitHub Package Release
        if: ${{ github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
        uses: softprops/action-gh-release@v1
        with:
          files: build/MrDocs-?.?.?-*.*
          name: ${{ github.ref_name || github.ref }}
          tag_name: ${{ github.ref_name || github.ref }}${{ ((!startsWith(github.ref, 'refs/tags/')) && '-release') || '' }}
          body_path: CHANGELOG.md
          prerelease: false
          draft: false
          token: ${{ github.token }}

      - uses: dev-drprasad/delete-older-releases@v0.2.1
        if: ${{ github.event_name == 'push' && contains(fromJSON('["master", "develop"]'), github.ref_name) }}
        with:
          keep_latest: 1
          delete_tag_pattern: ${{ github.ref_name || github.ref }}${{ ((!startsWith(github.ref, 'refs/tags/')) && '-release') || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

