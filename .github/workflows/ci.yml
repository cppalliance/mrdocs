name: Continuous Integration

on:
  push:
    branches:
      - develop
      - master
      - '*'
    tags:
      - "v*.*.*"

  pull_request:
    branches:
      - develop

concurrency:
  group: ${{format('{0}:{1}', github.repository, github.ref)}}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: "MSVC 14.3 - C++20", os: windows-2022, cxxstd: '20', cmake_args: -G "Visual Studio 17 2022" -A x64, github_release: true }
          - { name: "GCC 12 - C++20",    os: ubuntu-22.04, cc: gcc-12, cxx: g++-12, cxxstd: '20', install: g++-12, github_release: true }
          - { name: "GCC 11 - C++20",    os: ubuntu-22.04, cc: gcc-11, cxx: g++-11, cxxstd: 20, install: g++-11 }
          - { name: "Clang 15 - C++20",  os: ubuntu-22.04, cc: clang-15, cxx: clang++-15, cxxstd: 20, install: "clang-15 libxml2-utils default-jre" }

          # no <source_location>
          # - { name: "GCC 10 - C++20",    os: ubuntu-22.04, cc: gcc-10, cxx: g++-10, cxxstd: 20, install: g++-10 }
          # - { name: "GCC 9  - C++20",    os: ubuntu-22.04, cc: gcc-9,  cxx: g++-9,  cxxstd: 20, install: g++-9 }

          # no <source_location>
          # - { name: "Clang 14 - C++20",  os: ubuntu-22.04, cc: clang-14, cxx: clang++-14, cxxstd: 20, install: clang-14 }
          # - { name: "Clang 13 - C++20",  os: ubuntu-22.04, cc: clang-13, cxx: clang++-13, cxxstd: 20, install: clang-13 }
          # - { name: "Clang 12 - C++20",  os: ubuntu-22.04, cc: clang-12, cxx: clang++-12, cxxstd: 20, install: clang-12 }


    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    container: ${{ !startsWith( matrix.os , 'windows' ) && 'cppalliance/droneubuntu2204:llvm-731264b' || null }}
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Install LLVM
        id: llvm-install
        if: ${{ startsWith( matrix.os , 'windows' ) }}
        shell: bash
        run: |
          set -xe
          curl -L -o "RelWithDebInfo-731264b0.7z" "https://github.com/cppalliance/mrdox/releases/download/llvm-package-release/RelWithDebInfo-731264b0.7z"
          llvm_dir="${{runner.tool_cache}}/llvm-install"
          llvm_dir=$(echo "$llvm_dir" | sed 's/\\/\//g')
          7z x RelWithDebInfo-731264b0.7z -o"${llvm_dir}"
          echo "llvm-dir=$llvm_dir/RelWithDebInfo" >> $GITHUB_OUTPUT
          substring="C:/Program Files/Microsoft Visual Studio/2022/Community/DIA SDK/lib/amd64/diaguids.lib;"
          sed -i "s|$substring||g" "$llvm_dir/RelWithDebInfo/lib/cmake/llvm/LLVMExports.cmake"
          echo "llvm_dir=$llvm_dir"
          find "$llvm_dir" -type f

      - name: Install packages
        if: ${{ matrix.install }}
        uses: ./.github/actions/package_install
        id: package-install
        with:
          apt-get: ${{ matrix.install }}

      - name: CMake Workflow (C++${{ matrix.cxxstd }})
        uses: alandefreitas/cpp-actions/cmake-workflow@v1.0.0
        with:
          cmake-min-version: 3.13
          cxxstd: ${{ matrix.cxxstd }}
          cxx: ${{ matrix.cxx }}
          cc: ${{ matrix.cc }}
          install-prefix: .local
          extra-args: ${{ format('-D LLVM_ROOT={0} -D Clang_ROOT={0} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON', (startsWith( matrix.os , 'windows') && steps.llvm-install.outputs.llvm-dir) || '/usr/local') }}

      - name: Create packages
        working-directory: ./build
        run: cpack

      - name: Upload GitHub Release Artifacts
        if: ${{ matrix.github_release && github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
        uses: actions/upload-artifact@v3
        with:
          name: release-packages-${{ runner.os }}
          path: build/MrDox-?.?.?-*.*
          retention-days: 1

  docs:
    needs: build
    if: ${{ github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
    defaults:
      run:
        shell: bash

    name: Create Release Packages
    timeout-minutes: 120
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100

      - uses: actions/download-artifact@v3
        with:
          name: release-packages-Linux
          path: build

      - uses: actions/download-artifact@v3
        with:
          name: release-packages-Windows
          path: build

      - name: List artifacts
        run: ls -R
        working-directory: build

      - name: Create release notes
        uses: alandefreitas/cpp-actions/create-changelog@v1.0.0
        with:
          output-path: CHANGELOG.md
          limit: 50

      - name: Remove branch release
        if: ${{ github.event_name == 'push' && contains(fromJSON('["master", "develop"]'), github.ref_name) }}
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: ${{ github.ref_name }}-release
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true

      - name: Create GitHub Package Release
        if: ${{ github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
        uses: softprops/action-gh-release@v1
        with:
          files: build/MrDox-?.?.?-*.*
          name: ${{ github.ref_name || github.ref }}
          tag_name: ${{ github.ref_name || github.ref }}${{ ((!startsWith(github.ref, 'refs/tags/')) && '-release') || '' }}
          body_path: CHANGELOG.md
          prerelease: false
          draft: false
          token: ${{ github.token }}

      - uses: dev-drprasad/delete-older-releases@v0.2.1
        if: ${{ github.event_name == 'push' && contains(fromJSON('["master", "develop"]'), github.ref_name) }}
        with:
          keep_latest: 1
          delete_tag_pattern: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

