name: 'Boost Clone'
description: 'This workflow clones the boost source directory, attempting to get it from the cache first'
inputs:
  boost_dir:
    description: 'The boost directory. The default value assumes boost is in-source.'
    required: false
    default: 'boost'
  branch:
    description: 'Branch of the super-project'
    required: false
    default: 'master'
  patches:
    description: 'Libraries used to patch the boost installation'
    required: true
    default: ''
  modules:
    description: 'The boost submodules we need to clone'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Environment
      id: ctx
      shell: bash
      run: |
        boost_hash=$(git ls-remote https://github.com/boostorg/boost.git ${{ inputs.branch }} | awk '{ print $1 }')
        echo "boost_hash=$boost_hash" >> $GITHUB_OUTPUT
        
        # Create cache hash
        cache_hash=${{ runner.os }}-boost-$boost_hash
        # Add modules names to hash
        modules=${{ inputs.modules }}
        for module in ${modules//,/ }
        do
            module_filename=${module##*/}
            cache_hash=$cache_hash-$module_filename
        done
        # Add patch names and hashes to hash
        patches=${{ inputs.patches }}
        for patch in ${patches//,/ }
        do
            patch_hash=$(git ls-remote $patch ${{ inputs.branch }} | awk '{ print $1 }')
            cache_hash=$cache_hash-$patch-$patch_hash
        done
        echo "cache_hash=$cache_hash" >> $GITHUB_OUTPUT

    # attempt to get boost from the cache before cloning it
    - name: boost cache
      id: cache-boost
      uses: actions/cache@v3
      with:
        path: boost
        key: ${{ steps.ctx.outputs.cache_hash }}

    # clone (if boost not found in cache)
    - name: boost clone
      if: steps.cache-boost.outputs.cache-hit != 'true'
      shell: bash
      run: |
        git clone https://github.com/boostorg/boost.git -b ${{ inputs.branch }} ${{ inputs.boost_dir }}

    # apply patches (if boost not found in cache)
    - name: boost patches
      if: steps.cache-boost.outputs.cache-hit != 'true' && inputs.patches != ''
      shell: bash
      working-directory: ${{ inputs.boost_dir }}/libs
      run: |
        # Apply boost patches ${{ inputs.patches }}
        patches=${{ inputs.patches }}
        for patch in ${patches//,/ }
        do
            git clone $patch -b ${{ inputs.branch }}
        done

    # Init all submodules (if boost not found in cache + no specific modules specified)
    - name: boost init submodules
      if: (steps.cache-boost.outputs.cache-hit != 'true' && inputs.modules == '')
      working-directory: ${{ inputs.boost_dir }}
      shell: bash
      run: |
        # Init all boost submodules
        git submodule update --init --recursive

    # Init specified submodules (if boost not found in cache + modules specified)
    - name: boost patches
      if: (steps.cache-boost.outputs.cache-hit != 'true' && inputs.modules != '')
      working-directory: ${{ inputs.boost_dir }}
      shell: bash
      run: |
        # Init required boost submodules
        echo "Look for python"
        if command -v python &> /dev/null; then
          python_executable="python"
        elif command -v python3 &> /dev/null; then
          python_executable="python3"
        elif command -v python2 &> /dev/null; then
          python_executable="python2"
        else
          echo "Please install Python!" >&2
          false
        fi
        echo "python_executable=$python_executable"
        
        echo "Init boostdep"
        git submodule update -q --init tools/boostdep
        
        echo "Run boostdep for required modules: ${{ inputs.modules }}"
        modules=${{ inputs.modules }}
        for module in ${modules//,/ }
        do
            echo "Init submodule $module"
            git submodule update -q --init libs/$module || true
        done
        for module in ${modules//,/ }
        do
            echo "Run boostdep for required module $module"
            $python_executable tools/boostdep/depinst/depinst.py --include benchmark --include example --include examples --include tools --include source $module
        done
