<?xml version="1.0" encoding="UTF-8"?>
<mrdocs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://github.com/cppalliance/mrdocs/raw/develop/mrdocs.rnc">
<namespace id="//////////////////////////8=">
  <namespace name="regular_ns" id="HfpFOdGBlFvzJWV5HwJnyWPM72g=">
    <doc>
      <para>
        <text>A regular namespace with different filters for members</text>
      </para>
    </doc>
    <struct name="regular" id="uwCvFwfbmTvoEwwfxdL9EV+P8/c=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="16" class="def"/>
      <doc>
        <para>
          <text>A symbol that passes the filters</text>
        </para>
        <para>
          <text>The symbol should have a page as usual</text>
        </para>
      </doc>
      <struct name="also_regular" id="HIH1h4hOIdF5+btaX+gwmErtATY=">
        <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="18" class="def"/>
        <doc>
          <para>
            <text>Child of a regular symbol extracted as regular</text>
          </para>
        </doc>
        <struct name="regular_as_well" id="ZZiAG+2jvp211xfxhzPQi3p+JQU=">
          <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="20" class="def"/>
          <doc>
            <para>
              <text>Grandchild of a regular symbol extracted as regular</text>
            </para>
          </doc>
        </struct>
      </struct>
    </struct>
    <function name="get_regular" id="GmX35W90ijAwMEpaZZqAbeG5UmU=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="28" class="def"/>
      <return>
        <type id="uwCvFwfbmTvoEwwfxdL9EV+P8/c=" name="regular"/>
      </return>
      <doc>
        <para>
          <text>A function to get a regular symbol</text>
        </para>
        <para>
          <text>When used in a function, the symbol should be shown as usual with a link to the page.</text>
        </para>
      </doc>
    </function>
    <struct name="see_below" id="TSJP5hkEf4wSQVuTwVCP1Zs/mBU=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="35" class="def"/>
      <doc>
        <para>
          <text>A symbol that passes the see-below filter</text>
        </para>
        <para>
          <text>A symbol that passes the filters and the see-below filter. The symbol should have a page as usual but, because it&apos;s a scope</text>
          <text> and not a namespace, the members should not be listed on that page.</text>
        </para>
      </doc>
    </struct>
    <function name="get_see_below" id="M7TOn0G63CtYGRm2THtNEEEdpLY=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="50" class="def"/>
      <return>
        <type id="TSJP5hkEf4wSQVuTwVCP1Zs/mBU=" name="see_below"/>
      </return>
      <doc>
        <para>
          <text>A function to get a see-below symbol</text>
        </para>
        <para>
          <text>When used in a function, the symbol name should be shown as usual. The page for this symbol is what should be different because</text>
          <text> the synopsis should say &quot;See below&quot; and the members are not listed unless it&apos;s a namespace or the symbol has been explicitly</text>
          <text> used as a dependency elsewhere.</text>
        </para>
      </doc>
    </function>
    <struct name="implementation_defined" id="4SJRVLqyXsDWvcWXoyjLUtLXROw=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="59" class="def"/>
      <doc>
        <para>
          <text>A symbol that passes the implementation-defined filter</text>
        </para>
        <para>
          <text>A symbol that passes the filters and the implementation-defined filter The symbol is implementation defined and should not have a page.</text>
          <text> Members of an implementation-defined scope should not be traversed. If they are traversed for some other reason, they should also become</text>
          <text> implementation-defined.</text>
        </para>
      </doc>
    </struct>
    <function name="get_implementation_defined" id="ZrA7FcVREiRMaG484junagM1Snc=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="82" class="def"/>
      <return>
        <type id="4SJRVLqyXsDWvcWXoyjLUtLXROw=" name="implementation_defined"/>
      </return>
      <doc>
        <para>
          <text>A function to get an implementation-defined symbol</text>
        </para>
        <para>
          <text>When used in a function, the implementation-defined comment should replace the real type.</text>
        </para>
        <para>
          <text>It&apos;s the responsibility of the function documentation to explain the implementation-defined symbol.</text>
        </para>
      </doc>
    </function>
    <function name="get_dependency" id="JsA4nL3r830aRrxkYOJehKibEWE=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="102" class="def"/>
      <return>
        <type id="1L0CXReBnwnJJ+QMfbufLsSVX8Q=" name="dependency"/>
      </return>
      <doc>
        <para>
          <text>A function to get an excluded symbol</text>
        </para>
        <para>
          <text>When used in a function, only the symbol name should be shown. No links should be generated for this symbol.</text>
        </para>
      </doc>
    </function>
  </namespace>
  <namespace name="see_below_ns" id="exW9PGqoF7V7OCpvgUIZOhj7WwI=">
    <doc>
      <para>
        <text>A see-below namespace</text>
      </para>
      <para>
        <text>All member symbols should become see-below. All members are traversed as see-below.</text>
      </para>
      <para>
        <text>The documentation page for these symbols should include the see-below comment.</text>
      </para>
    </doc>
    <struct name="regular" id="oCi9GhACSlMlNqMEp/8CzrcvYUc=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="127" class="def"/>
      <doc>
        <para>
          <text>Regular symbol in a see-below namespace</text>
        </para>
        <para>
          <text>The symbol becomes see-below because the whole namespace is see-below.</text>
        </para>
      </doc>
    </struct>
    <struct name="see_below" id="VpoO3YTaskouQspzjnerGL/r84w=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="145" class="def"/>
      <doc>
        <para>
          <text>See-below symbol in a see-below namespace</text>
        </para>
        <para>
          <text>The symbol becomes see-below because the whole namespace is see-below and because it&apos;s explicitly marked as see-below.</text>
        </para>
      </doc>
    </struct>
    <struct name="implementation_defined" id="V7X9PJ4pWsN52pFdrtqL2hmhnp8=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="155" class="def"/>
      <doc>
        <para>
          <text>Implementation-defined symbol in a see-below namespace</text>
        </para>
        <para>
          <text>The symbol does not become see-below because the the implentation-defined filter has precedence over the</text>
          <text> see-below filter.</text>
        </para>
        <para>
          <text>Functions using this symbol should explain the implementation-defined nature of the symbol.</text>
        </para>
      </doc>
    </struct>
    <function name="get_implementation_defined" id="Cte3a6dkPj265m1BZHW+q+5RYx4=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="164" class="def"/>
      <return>
        <type id="V7X9PJ4pWsN52pFdrtqL2hmhnp8=" name="implementation_defined"/>
      </return>
      <doc>
        <para>
          <text>A function to get an implementation-defined symbol in a see-below namespace</text>
        </para>
        <para>
          <text>When used in a function, the implementation-defined comment should replace the real type.</text>
        </para>
        <para>
          <text>It&apos;s the responsibility of the function documentation to explain the implementation-defined symbol.</text>
        </para>
      </doc>
    </function>
    <function name="get_dependency" id="a9NW/0+lwniKyNoc79ktu9ydz9Q=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="184" class="def"/>
      <return>
        <type id="CyWO4Tsh/ybq2vl/ylZdyGSc20U=" name="dependency"/>
      </return>
      <doc>
        <para>
          <text>A function to get a dependency symbol in a see-below namespace</text>
        </para>
        <para>
          <text>The symbol should be extracted as a dependency because the exclude filter has precedence over the see-below filter.</text>
          <text> Only included symbols can be promoted to see-below.</text>
        </para>
        <para>
          <text>It&apos;s the responsibility of the function documentation to explain the dependency.</text>
        </para>
      </doc>
    </function>
  </namespace>
  <namespace-alias name="see_below_ns_alias" id="ZOLXb+PiKO6aTHMnfr3P9Mgop24=">
    <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="196"/>
    <doc>
      <para>
        <text>Namespace alias to form a dependency on the see-below namespace</text>
      </para>
      <para>
        <text>The alias should be linked as usual and, because it&apos;s a namespace, the members should be listed on the page.</text>
      </para>
    </doc>
    <aliased name="see_below_ns" id="exW9PGqoF7V7OCpvgUIZOhj7WwI="/>
  </namespace-alias>
  <namespace name="implementation_defined_ns" id="ZYn+worzOdzCMW6yaZC9jAkpVTk=">
    <doc>
      <para>
        <text>An implementation-defined namespace</text>
      </para>
      <para>
        <text>Members are not traversed and, if traversed for some other reason, they also become implementation-defined.</text>
      </para>
    </doc>
  </namespace>
  <namespace-alias name="implementation_defined_ns_alias" id="CzgfGPX1nw65BdnXgQsTa12LA2Y=">
    <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="215"/>
    <doc>
      <para>
        <text>Namespace alias to form a dependency on the implementation-defined namespace</text>
      </para>
    </doc>
    <aliased name="implementation_defined_ns" id="ZYn+worzOdzCMW6yaZC9jAkpVTk="/>
  </namespace-alias>
  <namespace-alias name="dependency_ns_alias" id="iz2edsTj1BrHatwuxuBXSOfqpDE=">
    <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="233"/>
    <doc>
      <para>
        <text>Namespace alias to form the dependency on dependency_ns</text>
      </para>
    </doc>
    <aliased name="dependency_ns" id="FVHkx2YC1v9lxjwdG5D+M2e5SIA="/>
  </namespace-alias>
  <struct name="regular" id="cw0xJkxH12xMAqMkCi84zr2R6nQ=">
    <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="251" class="def"/>
    <doc>
      <para>
        <text>A regular symbol in the global namespace</text>
      </para>
      <para>
        <text>This symbol should have a page as usual.</text>
      </para>
    </doc>
    <struct name="also_regular" id="bCLHAM9lOQrXlNa5dlpbk5UpW2k=">
      <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="253" class="def"/>
      <doc>
        <para>
          <text>Child of a regular symbol: should be traversed as usual</text>
        </para>
      </doc>
      <struct name="regular_as_well" id="cF5hGQlXVxQ9lU9qT768m47j5fE=">
        <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="255" class="def"/>
        <doc>
          <para>
            <text>Grandchild of a regular symbol: should be traversed as usual</text>
          </para>
        </doc>
      </struct>
    </struct>
  </struct>
  <function name="get_regular" id="ja9KgZ+gKpeRL1CK/1+wSZ41F18=">
    <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="263" class="def"/>
    <return>
      <type id="cw0xJkxH12xMAqMkCi84zr2R6nQ=" name="regular"/>
    </return>
    <doc>
      <para>
        <text>A function to get a regular symbol in the global namespace</text>
      </para>
      <para>
        <text>When used in a function, the symbol should be shown as usual with a link to the page.</text>
      </para>
    </doc>
  </function>
  <struct name="see_below" id="1gqUCUm5v18bVRIAohOhUsenH0o=">
    <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="271" class="def"/>
    <doc>
      <para>
        <text>A see-below symbol in the global namespace</text>
      </para>
      <para>
        <text>This symbol should have a page as usual but, because it&apos;s a scope and not a namespace, the members should not be listed on that page.</text>
      </para>
      <para>
        <text>The synopsis should say &quot;See below&quot;.</text>
      </para>
    </doc>
  </struct>
  <function name="get_see_below" id="eg89BLjqgCjN8fLjTLnl5lhYTE0=">
    <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="290" class="def"/>
    <return>
      <type id="1gqUCUm5v18bVRIAohOhUsenH0o=" name="see_below"/>
    </return>
    <doc>
      <para>
        <text>A function to get a see-below symbol in the global namespace</text>
      </para>
      <para>
        <text>When used in a function, the symbol name should be shown as usual. The page for this symbol is what should be different because</text>
        <text> the synopsis should say &quot;See below&quot; and the members are not listed unless it&apos;s a namespace or the symbol has been explicitly</text>
        <text> used as a dependency elsewhere.</text>
      </para>
    </doc>
  </function>
  <struct name="implementation_defined" id="rl76spVysmpVYgBTOlxoh5Z9fk8=">
    <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="295" class="def"/>
    <doc>
      <para>
        <text>An implementation-defined symbol in the global namespace</text>
      </para>
      <para>
        <text>The symbol is implementation defined and should not have a page.</text>
      </para>
    </doc>
  </struct>
  <function name="get_implementation_defined" id="65ri7AMHwO5ME919iJQNbXl0TVE=">
    <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="304" class="def"/>
    <return>
      <type id="rl76spVysmpVYgBTOlxoh5Z9fk8=" name="implementation_defined"/>
    </return>
    <doc>
      <para>
        <text>A function to get an implementation-defined symbol in the global namespace</text>
      </para>
      <para>
        <text>When used in a function, the implementation-defined comment should replace the real type.</text>
      </para>
      <para>
        <text>It&apos;s the responsibility of the function documentation to explain the implementation-defined symbol.</text>
      </para>
    </doc>
  </function>
  <function name="get_dependency" id="TDPbPaUgAt15wH9Aq054dH6qByE=">
    <file short-path="extraction-mode.cpp" source-path="extraction-mode.cpp" line="313" class="def"/>
    <return>
      <type id="t1gs2ps85mDDF3gcK68GCS5x23g=" name="dependency"/>
    </return>
    <doc>
      <para>
        <text>A function to get a dependency symbol on the global namespace</text>
      </para>
      <para>
        <text>The symbol should be extracted as a dependency but its members should not be traversed.</text>
      </para>
    </doc>
  </function>
</namespace>
</mrdocs>
