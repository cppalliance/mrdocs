<?xml version="1.0" encoding="UTF-8"?>
<mrdocs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://github.com/cppalliance/mrdocs/raw/develop/mrdocs.rnc">
<namespace id="//////////////////////////8=">
  <namespace name="B" id="kPgq2AM8TvyGDGm5jEWfqYlOPmY=">
    <struct name="C" id="r/5vKTgl4cXSK5TnuZ/+P7qmkJ0=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="39" class="def"/>
      <doc>
        <related>
          <reference id="OiYqKxV5vNAeh0jqRKIygSwyW4o=">::f3</reference>
        </related>
      </doc>
    </struct>
  </namespace>
  <template>
    <tparam name="T" class="type"/>
    <tparam name="Enable" class="type" default="void"/>
    <class name="A" id="m/JW900ik2XLYvUdA4MCuWZQd80=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="92" class="def"/>
      <doc>
        <brief>
          <text>The partial specialization of A is enabled via a template parameter</text>
        </brief>
      </doc>
    </class>
  </template>
  <template class="partial" requires="std::is_integral_v&lt;T&gt;" id="m/JW900ik2XLYvUdA4MCuWZQd80=">
    <tparam name="T" class="type"/>
    <targ class="type" type="T"/>
    <class name="A" id="f80OzcD5UlgQ2KOvUj+MvoJcAFE=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="97" class="def"/>
      <doc>
        <brief>
          <text>Specialization for integral types</text>
        </brief>
      </doc>
    </class>
  </template>
  <template>
    <tparam name="T" class="type"/>
    <tparam name="Enable" class="type" default="void"/>
    <struct name="S" id="IZrmVBMJu1uvsP9zur5JVrwgYmE=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="100" class="def"/>
      <doc>
        <brief>
          <text>SFINAE with std::void_t</text>
        </brief>
      </doc>
      <function name="store" id="KmwKarrWHSv7aalrBX18hjPbEfs=">
        <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="103" class="def"/>
        <param>
          <type class="pointer">
            <pointee-type name="void" cv-qualifiers="const"/>
          </type>
        </param>
      </function>
    </struct>
  </template>
  <template class="partial" id="IZrmVBMJu1uvsP9zur5JVrwgYmE=">
    <tparam name="T" class="type"/>
    <targ class="type" type="T"/>
    <targ class="type" type="std::void_t&lt;T::a::b&gt;"/>
    <struct name="S" id="g0UNZpdodOU5mGCtcpviXd8o6Vk=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="108" class="def"/>
      <doc>
        <brief>
          <text>SFINAE with std::void_t</text>
        </brief>
      </doc>
      <function name="store" id="2KfuSRGlpNo9Lk/lk1bhwZqm/BY=">
        <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="110" class="def"/>
        <param>
          <type class="pointer">
            <pointee-type name="void" cv-qualifiers="const"/>
          </type>
        </param>
      </function>
    </struct>
  </template>
  <template>
    <tparam name="T" class="type"/>
    <function name="f1" requires="std::is_integral_v&lt;T&gt;" id="1VN+nmJkLcjg6wK0C6XNq8dG1Ro=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="29"/>
      <return>
        <type name="T"/>
      </return>
      <param name="value">
        <type name="T"/>
      </param>
      <doc>
        <brief>
          <text>Enabled via return type</text>
        </brief>
      </doc>
    </function>
  </template>
  <template requires="std::is_integral_v&lt;T&gt;">
    <tparam name="T" class="type"/>
    <function name="f10" id="MX3B1GMAk3D0sirBOV2sk9C49uw=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="88"/>
      <param name="value">
        <type name="T"/>
      </param>
      <doc>
        <brief>
          <text>Enabled via type template parameter</text>
        </brief>
        <para>
          <text>This pattern should not be used because the function signature is unmodified and therefore only supports one overload.</text>
        </para>
        <para>
          <text>It&apos;s a common mistake is to declare two function templates that differ only in their default template arguments.</text>
        </para>
        <para>
          <text>This does not work because the declarations are treated as redeclarations of the same function template (default template arguments are not accounted for in function template equivalence).</text>
        </para>
      </doc>
    </function>
  </template>
  <template>
    <tparam name="T" class="type"/>
    <function name="f2" requires="std::is_integral_v&lt;T&gt;" id="7RxfINQ5PQyMFT7lVKhcQZiocmU=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="34"/>
      <return>
        <type name="int"/>
      </return>
      <param name="value">
        <type name="T"/>
      </param>
      <doc>
        <brief>
          <text>Enabling a specified return type</text>
        </brief>
      </doc>
    </function>
  </template>
  <template>
    <tparam name="T" class="type"/>
    <function name="f3" requires="std::is_integral_v&lt;T&gt;" id="OiYqKxV5vNAeh0jqRKIygSwyW4o=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="43"/>
      <return>
        <type id="r/5vKTgl4cXSK5TnuZ/+P7qmkJ0=" name="B::C"/>
      </return>
      <param name="value">
        <type name="T"/>
      </param>
      <doc>
        <brief>
          <text>Enabling a specified return type in another namespace</text>
        </brief>
        <relates>
          <reference id="r/5vKTgl4cXSK5TnuZ/+P7qmkJ0=">C</reference>
        </relates>
      </doc>
    </function>
  </template>
  <template>
    <tparam name="T" class="type"/>
    <function name="f4" requires="std::is_integral_v&lt;T&gt;" id="oQV00j0v7EfuVl9bWFumA28DNZM=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="48"/>
      <return>
        <type name="T"/>
      </return>
      <param name="value">
        <type name="T"/>
      </param>
      <doc>
        <brief>
          <text>Enabled via return type with std::enable_if</text>
        </brief>
      </doc>
    </function>
  </template>
  <template requires="std::is_integral_v&lt;T&gt;">
    <tparam name="T" class="type"/>
    <function name="f5" id="4Z8f2LwbeJzKuu95VpPC5b3UKZQ=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="53"/>
      <return>
        <type name="T"/>
      </return>
      <param name="value">
        <type name="T"/>
      </param>
      <doc>
        <brief>
          <text>Enabled via a non-type template parameter with helper</text>
        </brief>
      </doc>
    </function>
  </template>
  <template requires="std::is_integral_v&lt;T&gt;">
    <tparam name="T" class="type"/>
    <function name="f6" id="QQ+RfmlXmyvRCoT+N6iLEixOE3w=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="58"/>
      <return>
        <type name="T"/>
      </return>
      <param name="value">
        <type name="T"/>
      </param>
      <doc>
        <brief>
          <text>Enabled via a non-type template parameter without helper</text>
        </brief>
      </doc>
    </function>
  </template>
  <template requires="std::is_integral_v&lt;T&gt;">
    <tparam name="T" class="type"/>
    <function name="f7" id="5j4YKg9GCIyC/kpDPExDouNRI8E=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="63"/>
      <param name="value">
        <type name="T"/>
      </param>
      <doc>
        <brief>
          <text>Enabled via a non-type template parameter using int instead of bool</text>
        </brief>
      </doc>
    </function>
  </template>
  <template>
    <tparam name="T" class="type"/>
    <function name="f8" requires="std::is_integral_v&lt;T&gt;" id="N7SAlDvKDvPlACsckMXASo+muPE=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="67"/>
      <return>
        <type name="T"/>
      </return>
      <param name="value">
        <type name="T"/>
      </param>
      <doc>
        <brief>
          <text>Enabled via parameter without helper</text>
        </brief>
      </doc>
    </function>
  </template>
  <template>
    <tparam name="T" class="type"/>
    <function name="f9" requires="std::is_integral_v&lt;T&gt;" id="njCzIgSzvUpYyI1eg28pJ1dPwcM=">
      <file short-path="sfinae.cpp" source-path="sfinae.cpp" line="72"/>
      <return>
        <type name="T"/>
      </return>
      <param name="value">
        <type name="T"/>
      </param>
      <doc>
        <brief>
          <text>Enabled via parameter with helper</text>
        </brief>
      </doc>
    </function>
  </template>
</namespace>
</mrdocs>
