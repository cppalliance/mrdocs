#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# Copyright (c) 2023 Klemens Morgenstern (klemens.morgenstern@gmx.net)
#
# Official repository: https://github.com/cppalliance/mrdox
#
# https://relaxng.org/compact-tutorial-20030326.html
#
# convert to mrdox.rng with tools/trang.jar (https://relaxng.org/jclark/trang.html)
# when commiting beacuse xmllint doesn't understand the compact format
#

namespace xsi= "http://www.w3.org/2001/XMLSchema-instance"

grammar
{
    start = element mrdox
    {
        attribute xsi:noNamespaceSchemaLocation {text}?,
        Namespace
    }

    #---------------------------------------------

    Namespace =
        element namespace
        {
            Name,
            ID?,
            Javadoc?,
            Scope
        }

    #---------------------------------------------

    Record =
        element class  { RecordContent } |
        element struct { RecordContent } |
        element union  { RecordContent }

    RecordContent =
    (
        Name,
        ID,
        Location *,
        (
            BaseInfo |
            Attr |
            TemplateParamInfo |
            MemberTypeInfo |
            element friend { ID } |
            Javadoc? |
            Scope
        ) *
    )

    BaseInfo =
        element base
        {
            Name,
            Access,
            attribute class { "virtual" } ?,
            ID
        }

    MemberTypeInfo =
        element data
        {
            Name,
            attribute type { text },
            attribute value { text } ?,
            Access,
            ID ?,
            Attr *
        }

    #---------------------------------------------

    Function =
        element function
        {
            Name,
            Access?,
            ID,
            (
                Location * |
                Attr * |
                element return { attribute type { text }, ID ? } |
                element param
                {
                    Name?,
                    attribute type { text },
                    attribute default { text } ?,
                    ID ?
                } * |
                TemplateParamInfo * |
                Javadoc ?
            ) *
        }

    #---------------------------------------------

    Enum =
        element enum
        {
            Name,
            attribute class {"scoped"} ?,
            attribute type { text } ?,
            ID,
            Location *,
            element value
            {
                Name,
                attribute value { text }
            } *,
            Javadoc ?
        }

    #---------------------------------------------

    Typedef =
        element alias
        {
            Name,
            ID,
            Location *,
            element type { Name, ID ? }
        } |
        element typedef
        {
            Name,
            ID,
            Location *,
            element type { Name, ID ? }
        }

    #---------------------------------------------

    Var =
        element variable
        {
            Name,
            ID,
            (
                Location &
                Attr * &
                element type { Name, ID ? } &
                Javadoc ?
            )
        }

    #---------------------------------------------

    Symbol =
    (
        attribute Tag { text },
        attribute Name { text },
        ID
    )

    Symbols =
        element symbols
        {
            element symbol { Symbol }
        } *

    TemplateParamInfo = element tparam { attribute decl { text } }

    Location =
        element file
        {
            attribute path {text},
            attribute line {text},
            attribute class {"def"} ?,
            empty
        }

    Access = attribute access { "public"|"private"|"protected" }

    StorageClass = (
        element extern          {empty} |
        element static          {empty} |
        element private-extern  {empty} |
        element sc-auto         {empty} |
        element sc-register     {empty}
    )

    Scope = (
            Namespace |
            Record    |
            Function  |
            Typedef   |
            Enum      |
            Var)*

    # JavaDoc not in a nested grammar , so we can convert it to a XSD

    Javadoc = element doc {Brief ?, Node* }
    Text = element text { text }
    Brief = element brief { Node * }
    Node = (Text | Styled | Paragraph | Brief | Admonition | Code | Param | TParam | Returns)
    Styled = (
        element none { text } |
        element mono { text } |
        element bold { text } |
        element italic { text })
    Paragraph = element para {
        attribute class { text } ?,
        Node*
    }

    Admonition = Paragraph
    Code = element code { Node * }
    Param = element param {
        attribute name { text } ?,
        Node*
    }

    TParam = element tparam {
        attribute name { text } ?,
        Node*
    }

    Returns = element returns { Node * }

    ID   = attribute id { text }

    Name = attribute name { text }

    Attr = element attr { ID, Name ?, attribute value { text } ? }
}